"""Maintaining files from external source.
"""

THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS = [
    core.replace(
        before = "@com_google_absl//absl/",
        after = "//third_party/absl/",
        paths = glob([
            "**/BUILD",
            "**/BUILD.bazel",
            "**.bzl",
        ]),
    ),
    core.replace(
        before = "//absl",
        after = "//third_party/absl",
        paths = glob([
            "**/BUILD",
            "**/BUILD.bazel",
            "**.bzl",
        ]),
    ),
    core.replace(
        before = "\"absl/",
        after = "\"third_party/absl/",
        paths = glob([
            "**.cc",
            "**.cpp",
            "**.h",
            "**.inc",
        ]),
    ),
    core.replace(
        before = "//googletest",
        after = "//third_party/googletest/googletest",
        paths = glob([
            "**/BUILD",
            "**/BUILD.bazel",
            "**.bzl",
        ]),
    ),
    core.replace(
        before = "@com_google_googletest//",
        after = "//third_party/googletest",
        paths = glob([
            "**/BUILD",
            "**/BUILD.bazel",
            "**.bzl",
        ]),
    ),
    core.replace(
        before = "${start}gmock/${header}${end}",
        after = "\"third_party/googletest/googlemock/include/gmock/${header}\"",
        regex_groups = {
            "header": r"[A-Za-z0-9\-_\/]+.h",
            "start": "(\"|<)",
            "end": "(\"|>)",
        },
        paths = glob([
            "**.cc",
            "**.cpp",
            "**.h",
            "**.inc",
        ]),
    ),
    core.replace(
        before = "${start}gtest/${header}${end}",
        after = "\"third_party/googletest/googletest/include/gtest/${header}\"",
        regex_groups = {
            "header": r"[A-Za-z0-9\-_\/]+.h",
            "start": "(\"|<)",
            "end": "(\"|>)",
        },
        paths = glob([
            "**.cc",
            "**.cpp",
            "**.h",
            "**.inc",
        ]),
    ),
    core.replace(
        before = "@com_github_google_benchmark//",
        after = "//third_party/benchmark",
        paths = glob([
            "**/BUILD",
            "**/BUILD.bazel",
            "**.bzl",
        ]),
    ),
    core.replace(
        before = "\"benchmark/",
        after = "\"third_party/benchmark/include/benchmark/",
        paths = glob([
            "**.cc",
            "**.cpp",
            "**.h",
            "**.inc",
        ]),
    ),
    core.replace(
        before = "#include <benchmark/benchmark.h>",
        after = "#include \"third_party/benchmark/include/benchmark/benchmark.h\"",
        paths = glob([
            "**.cc",
            "**.cpp",
            "**.h",
            "**.inc",
        ]),
    ),
    core.replace(
        before = "@com_github_gflags_gflags//",
        after = "//third_party/gflags",
        paths = glob([
            "**/BUILD",
            "**/BUILD.bazel",
            "**.bzl",
        ]),
    ),
    core.replace(
        before = "\"gflags/",
        after = "\"third_party/gflags/",
        paths = glob([
            "**.cc",
            "**.cpp",
            "**.h",
            "**.inc",
            "**.in",
        ]),
    ),
    core.replace(
        before = "@com_github_google_glog//",
        after = "//third_party/glog",
        paths = glob([
            "**/BUILD",
            "**/BUILD.bazel",
            "**.bzl",
        ]),
    ),
    core.replace(
        before = "\"glog/",
        after = "\"third_party/glog/",
        paths = glob([
            "**.cc",
            "**.cpp",
            "**.h",
            "**.inc",
            "**.in",
        ]),
    ),
    core.replace(
        before = "@zlib//",
        after = "//third_party/zlib",
        paths = glob([
            "**/BUILD",
            "**/BUILD.bazel",
            "**.bzl",
        ]),
    ),
    core.replace(
        before = "@com_github_madler_zlib//",
        after = "//third_party/zlib",
        paths = glob([
            "**/BUILD",
            "**/BUILD.bazel",
            "**.bzl",
        ]),
    ),
    core.replace(
        before = "include ${start}zlib.h${end}",
        after = "include \"third_party/zlib/zlib.h\"",
        regex_groups = {
            "start": "(\"|<)",
            "end": "(\"|>)",
        },
        paths = glob([
            "**.c",
            "**.cc",
            "**.cpp",
            "**.h",
            "**.inc",
        ]),
    ),
    core.replace(
        before = "include ${start}zconf.h${end}",
        after = "include \"third_party/zlib/zconf.h\"",
        regex_groups = {
            "start": "(\"|<)",
            "end": "(\"|>)",
        },
        paths = glob([
            "**.c",
            "**.cc",
            "**.cpp",
            "**.h",
            "**.inc",
        ]),
    ),
    core.replace(
        before = "include ${start}snappy.h${end}",
        after = "include \"third_party/snappy/snappy.h\"",
        regex_groups = {
            "start": "(\"|<)",
            "end": "(\"|>)",
        },
        paths = glob([
            "**.c",
            "**.cc",
            "**.cpp",
            "**.h",
            "**.inc",
        ]),
    ),
    core.replace(
        before = "include ${start}rapidjson/${header}.h${end}",
        after = "include \"third_party/rapidjson/include/rapidjson/${header}.h\"",
        regex_groups = {
            "header": r"[A-Za-z0-9\-_\/]+",
            "start": "(\"|<)",
            "end": "(\"|>)",
        },
        paths = glob([
            "**.c",
            "**.cc",
            "**.cpp",
            "**.h",
            "**.inc",
        ]),
    ),
    core.replace(
        before = "include ${start}thrift/${header}.h${end}",
        after = "include \"third_party/thrift/src/thrift/${header}.h\"",
        regex_groups = {
            "header": r"[A-Za-z0-9\-_\/]+",
            "start": "(\"|<)",
            "end": "(\"|>)",
        },
        paths = glob([
            "**.c",
            "**.cc",
            "**.cpp",
            "**.h",
            "**.inc",
        ]),
    ),
    core.replace(
        before = "@com_google_protobuf//",
        after = "//third_party/protobuf",
        paths = glob([
            "**/BUILD",
            "**/BUILD.bazel",
            "**.bzl",
        ]),
    ),
    core.replace(
        before = "include ${start}google/protobuf/${header}${end}",
        after = "include \"third_party/protobuf/src/google/protobuf/${header}\"",
        regex_groups = {
            "header": r"[A-Za-z0-9\-_\/]+\.(h|hpp|inc)",
            "start": "(\"|<)",
            "end": "(\"|>)",
        },
        paths = glob(
            include = [
                "**.c",
                "**.cc",
                "**.cpp",
                "**.h",
                "**.inc",
            ],
            exclude = [
                "**.pb.cc",
                "**.pb.h",
            ],
        ),
    ),
    core.replace(
        before = "include ${start}bzlib.h${end}",
        after = "include \"third_party/bzip2/bzlib.h\"",
        regex_groups = {
            "start": "(\"|<)",
            "end": "(\"|>)",
        },
        paths = glob(
            include = [
                "**.c",
                "**.cc",
                "**.cpp",
                "**.h",
                "**.inc",
            ],
            exclude = [
                "**.pb.cc",
                "**.pb.h",
            ],
        ),
    ),
    core.replace(
        before = "include ${start}zstd.h${end}",
        after = "include \"third_party/zstd/lib/zstd.h\"",
        regex_groups = {
            "start": "(\"|<)",
            "end": "(\"|>)",
        },
        paths = glob(
            include = [
                "**.c",
                "**.cc",
                "**.cpp",
                "**.h",
                "**.inc",
            ],
            exclude = [
                "**.pb.cc",
                "**.pb.h",
            ],
        ),
    ),
    core.replace(
        before = "#include ${start}${header_dir}/${header}${end}",
        after = "#include \"third_party/cpprestsdk/include/${header_dir}/${header}\"",
        regex_groups = {
            "header_dir": "(cpprest|pplx)",
            "header": r"[A-Za-z0-9\-_\/]+\.(h|hpp|dat)?",
            "start": "(\"|<)",
            "end": "(\"|>)",
        },
        paths = glob([
            "**.c",
            "**.cc",
            "**.cpp",
            "**.h",
            "**.inc",
        ]),
    ),
    core.replace(
        before = "#include ${start}xsimd/xsimd.hpp${end}",
        after = "#include \"third_party/xsimd/xsimd.hpp\"",
        regex_groups = {
            "start": "(\"|<)",
            "end": "(\"|>)",
        },
        paths = glob([
            "**.c",
            "**.cc",
            "**.cpp",
            "**.h",
            "**.hpp",
            "**.inc",
        ]),
    ),
    core.replace(
        before = "#include ${start}fmt/${header}${end}",
        after = "#include \"third_party/fmt/${header}\"",
        regex_groups = {
            "header": r"[A-Za-z0-9\-_\/]+.h",
            "start": "(\"|<)",
            "end": "(\"|>)",
        },
    ),
    core.replace(
        before = "#include ${start}spdlog/${header}${end}",
        after = "#include \"third_party/spdlog/${header}\"",
        regex_groups = {
            "header": r"[A-Za-z0-9\-_\/]+.h",
            "start": "(\"|<)",
            "end": "(\"|>)",
        },
    ),
]

core.workflow(
    name = "com_google_absl",  # 2021-03-05
    origin = git.origin(
        url = "https://github.com/abseil/abseil-cpp/",
        ref = "ab21820d47e4f83875dda008b600514d3520fd35",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "absl/**",
        ],
        exclude = [
            "**/CMakeLists.txt",
        ],
    ),
    destination_files = glob(
        [
            "third_party/absl/**",
        ],
        exclude = [
            "third_party/absl/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("", "third_party"),
        # TODO(zhangshuai.ustc): Move all platform constraints to unified place.
        core.replace(
            before = "Flags from absl/flags/internal/",
            after = "Flags from third_party/absl/flags/internal/",
            paths = glob([
                "third_party/absl/flags/internal/usage_test.cc",
            ]),
        ),
        patch.apply([
            "third_party/absl/patches/0001-support-windows-platform.patch",
        ]),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
        patch.apply([
            "third_party/absl/patches/0002-fix-program-name-test.patch",
            "third_party/absl/patches/0003-mark-inlined-vector-benchmark-size-large.patch",
            "third_party/absl/patches/0004-suppress-macro-undef-warning.patch",
        ]),
    ],
)

core.workflow(
    name = "com_google_googletest",  # 2021-03-10
    origin = git.origin(
        url = "https://github.com/google/googletest/",
        ref = "763eaa430540926fa16060654427149802c97fba",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "googlemock/**",
            "googletest/**",
            "BUILD.bazel",
        ],
        exclude = [
            "**/CMakeLists.txt",
        ],
    ),
    destination_files = glob(
        [
            "third_party/googletest/googlemock/**",
            "third_party/googletest/googletest/**",
            "third_party/googletest/BUILD.bazel",
        ],
        exclude = [
            "third_party/googletest/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("", "third_party/googletest"),
        core.replace(
            before = "//:windows",
            after = "//third_party/absl:windows",
            paths = glob([
                "**/BUILD",
                "**/BUILD.bazel",
                "**.bzl",
            ]),
        ),
        patch.apply([
            "third_party/googletest/patches/0000-always-use-absl.patch",
        ]),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
        core.replace(
            before = "//:g",
            after = "//third_party/googletest:g",
            paths = glob([
                "**/BUILD",
                "**/BUILD.bazel",
                "**.bzl",
            ]),
        ),
    ],
)

core.workflow(
    name = "com_github_google_benchmark",  # 2020-11-06
    origin = git.origin(
        url = "https://github.com/google/benchmark/",
        ref = "348aa2c964494b5947c0e7f96b82c1fe844d684f",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "include/benchmark/**",
            "docs/**",
            "src/**",
            "test/**",
            "BUILD.bazel",
        ],
        exclude = [
            "**/CMakeLists.txt",
        ],
    ),
    destination_files = glob(
        [
            "third_party/benchmark/**",
        ],
        exclude = [
            "third_party/benchmark/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("test/BUILD", "test/BUILD.bazel"),
        core.move("", "third_party/benchmark"),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
        core.replace(
            before = "//:benchmark",
            after = "//third_party/benchmark:benchmark",
            paths = glob([
                "**/BUILD",
                "**/BUILD.bazel",
                "**.bzl",
            ]),
        ),
        core.replace(
            before = "//test:",
            after = "//third_party/benchmark/test:",
            paths = glob([
                "**/BUILD",
                "**/BUILD.bazel",
                "**.bzl",
            ]),
        ),
        patch.apply([
            "third_party/benchmark/patches/0000-remove-strip-include-prefix.patch",
            "third_party/benchmark/patches/0001-use-expect-double-eq.patch",
        ]),
    ],
)

core.workflow(
    name = "com_github_gflags_gflags",  # 2020-10-03
    origin = git.origin(
        url = "https://github.com/gflags/gflags/",
        ref = "827c769e5fc98e0f2a34c47cef953cc6328abced",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "bazel/**",
            "doc/**",
            "src/**",
            "test/**",
            "BUILD",
        ],
        exclude = [
            "**/CMakeLists.txt",
            "**/*.cmake",
        ],
    ),
    destination_files = glob(
        [
            "third_party/gflags/**",
        ],
        exclude = [
            "third_party/gflags/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("BUILD", "BUILD.bazel"),
        core.move("bazel/expanded_template/BUILD", "bazel/expanded_template/BUILD.bazel"),
        core.move("", "third_party/gflags"),
        core.replace(
            before = "//bazel/expanded_template",
            after = "//third_party/gflags/bazel/expanded_template",
            paths = glob([
                "**/BUILD",
                "**/BUILD.bazel",
                "**.bzl",
            ]),
        ),
        core.replace(
            before = "//:x64_windows",
            after = "//third_party/absl:windows",
            paths = glob([
                "**/BUILD",
                "**/BUILD.bazel",
                "**.bzl",
            ]),
        ),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
        core.replace(
            before = "\"${header}\"",
            after = "\"third_party/gflags/src/${header}\"",
            regex_groups = {
                "header": "(config.h|mutex.h|util.h|windows_port.h)",
            },
            paths = glob([
                "**.cc",
                "**.h",
                "**.in",
                "**.inc",
            ]),
        ),
    ],
)

core.workflow(
    name = "com_github_google_glog",  # 2021-07-05T18:33:12Z
    origin = git.origin(
        url = "https://github.com/google/glog/",
        ref = "42ce901f286c6140329ce12a7cba379637e361db",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "bazel/**",
            "src/**",
            "BUILD.bazel",
        ],
        exclude = [
            "**/CMakeLists.txt",
            "**/*.cmake",
        ],
    ),
    destination_files = glob(
        [
            "third_party/glog/**",
        ],
        exclude = [
            "third_party/glog/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("", "third_party/glog"),
        core.replace(
            before = "//:glog",
            after = "//third_party/glog:glog",
            paths = glob([
                "**/BUILD",
                "**/BUILD.bazel",
                "**.bzl",
            ]),
        ),
        core.replace(
            before = "#include ${start}${prefix}/${header}${end}",
            after = "#include \"third_party/${prefix}/${header}\"",
            regex_groups = {
                "prefix": r"(gflags|glog)",
                "header": r"[A-Za-z0-9\-_\/]+.h",
                "start": "(\"|<)",
                "end": "(\"|>)",
            },
            paths = glob([
                "third_party/glog/bazel/example/*.cc",
            ]),
        ),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
        core.replace(
            before = "\"config.h\"",
            after = "\"third_party/glog/glog_internal/config.h\"",
            paths = glob([
                "**.cc",
                "**.h",
                "**.in",
                "**.inc",
            ]),
        ),
        core.replace(
            before = "\"mutex.h\"",
            after = "\"third_party/glog/src/base/mutex.h\"",
            paths = glob([
                "**.cc",
                "**.h",
                "**.in",
                "**.inc",
            ]),
        ),
        patch.apply([
            "third_party/glog/patches/0001-include-prefix-third-party.patch",
        ]),
    ],
)

core.workflow(
    name = "com_github_madler_zlib",  # 2017-01-16
    origin = git.origin(
        url = "https://github.com/madler/zlib",
        ref = "v1.2.11",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "**",
        ],
        exclude = [
            "**/CMakeLists.txt",
            "**.cmakein",
        ],
    ),
    destination_files = glob(
        [
            "third_party/zlib/**",
        ],
        exclude = [
            "third_party/zlib/BUILD.bazel",  # Hand-writing one.
            "third_party/zlib/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("", "third_party/zlib"),
        core.replace(
            before = "include \"${header}.h\"",
            after = "include \"third_party/zlib/${header}.h\"",
            regex_groups = {
                "header": r"[A-Za-z0-9]+",
            },
            paths = glob([
                "**.c",
                "**.cc",
                "**.h",
                "**.inc",
            ]),
        ),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
    ],
)

core.workflow(
    name = "com_github_google_snappy",  # 2021-03-09
    origin = git.origin(
        url = "https://github.com/google/snappy",
        ref = "5e7c14bd05ee72a4294f413ac386032a47578eac",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "**",
        ],
        exclude = [
            "CMakeLists.txt",
            "**/CMakeLists.txt",
            "**.cmakein",
        ],
    ),
    destination_files = glob(
        [
            "third_party/snappy/**",
        ],
        exclude = [
            "third_party/snappy/BUILD.bazel",  # Hand-writing one.
            # TODO(zhangshuai.ds): Support LZ4.
            "third_party/snappy/config.h",  # Hand-writing one.
            "third_party/snappy/snappy-stubs-public.h",  # Hand-writing one.
            "third_party/snappy/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("", "third_party/snappy"),
        core.replace(
            before = "include \"${header}.h\"",
            after = "include \"third_party/snappy/${header}.h\"",
            regex_groups = {
                "header": r"[A-Za-z0-9\-_]+",
            },
            paths = glob([
                "**.c",
                "**.cc",
                "**.h",
                "**.inc",
            ]),
        ),
        core.replace(
            before = "include \"third_party/snappy/zlib.h\"",
            after = "include \"third_party/zlib/zlib.h\"",
            paths = glob([
                "**.c",
                "**.cc",
                "**.h",
                "**.inc",
            ]),
        ),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
        patch.apply([
            "third_party/snappy/patches/0000-add-inline-modifier.patch",
            "third_party/snappy/patches/0001-unittest-load-data-from-runfiles.patch",
        ]),
    ],
)

# TODO(zhangshuai.ustc): Move third_party out.
# TODO(zhangshuai.ustc): Support LZ4, bzip, ...
core.workflow(
    name = "org_apache_arrow",  # 2021-05-19
    origin = git.origin(
        url = "https://github.com/apache/arrow/",
        ref = "apache-arrow-4.0.1",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "cpp/**",
            "java/**",
        ],
        exclude = [
            "**/CMakeLists.txt",
            "**.cmake",
            "**.cmakein",
            "**.cmake.in",
        ],
    ),
    destination_files = glob(
        [
            "third_party/arrow/**",
            "third_party/arrow_java/**",
        ],
        exclude = [
            "third_party/arrow/BUILD.bazel",  # Hand-writing one.
            "third_party/arrow/src/arrow/util/config.h",  # Hand-writing one.
            "third_party/arrow/src/parquet/parquet_version.h",  # Hand-writing one.
            "third_party/arrow/patches/**",
            "third_party/arrow_java/**/BUILD.bazel",
            "third_party/arrow_java/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("cpp", "third_party/arrow"),
        core.move("java", "third_party/arrow_java"),
        core.replace(
            before = "include \"arrow/${header}\"",
            after = "include \"third_party/arrow/src/arrow/${header}\"",
            regex_groups = {
                "header": r"[A-Za-z0-9\-_\/]+.h(pp)?",
            },
            paths = glob([
                "**.c",
                "**.cc",
                "**.h",
                "**.hpp",
                "**.inc",
            ]),
        ),
        core.replace(
            before = "include \"parquet/${header}\"",
            after = "include \"third_party/arrow/src/parquet/${header}\"",
            regex_groups = {
                "header": r"[A-Za-z0-9\-_\/]+.h",
            },
            paths = glob([
                "**.c",
                "**.cc",
                "**.h",
                "**.hpp",
                "**.inc",
            ]),
        ),
        core.replace(
            before = "include <hdfs.h>",
            after = "include \"third_party/arrow/thirdparty/hadoop/include/hdfs.h\"",
            paths = glob([
                "**.c",
                "**.cc",
                "**.h",
                "**.hpp",
                "**.inc",
            ]),
        ),
        core.replace(
            before = "include \"flatbuffers/${header}\"",
            after = "include \"third_party/arrow/thirdparty/flatbuffers/include/flatbuffers/${header}\"",
            regex_groups = {
                "header": r"[A-Za-z0-9\-_]+.h",
            },
            paths = glob([
                "**.c",
                "**.cc",
                "**.h",
                "**.hpp",
                "**.inc",
            ]),
        ),
        core.replace(
            before = "include <flatbuffers/flatbuffers.h>",
            after = "include \"third_party/arrow/thirdparty/flatbuffers/include/flatbuffers/flatbuffers.h\"",
            paths = glob([
                "**.c",
                "**.cc",
                "**.h",
                "**.hpp",
                "**.inc",
            ]),
        ),
        core.replace(
            before = "include \"org_apache_arrow_dataset_${CharUnderscore}.h\"",
            after = "include \"third_party/arrow_java/dataset/org_apache_arrow_dataset_${CharUnderscore}.h\"",
            regex_groups = {
                "CharUnderscore": r"[A-Za-z0-9_]+",
            },
            paths = glob([
                "third_party/arrow/src/jni/dataset/*.cc",
                "third_party/arrow/src/jni/dataset/*.h",
            ]),
        ),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
        patch.apply([
            "third_party/arrow/patches/0001-suppress-glog-redefine-macro-warnings.patch",
        ]),
    ],
)

core.workflow(
    name = "com_github_tencent_rapidjson",  # 2021-03-02
    origin = git.origin(
        url = "https://github.com/Tencent/rapidjson",
        ref = "1c2c8e085a8b2561dff17bedb689d2eb0609b689",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "**",
        ],
        exclude = [
            "**/CMakeLists.txt",
            "**.cmakein",
        ],
    ),
    destination_files = glob(
        [
            "third_party/rapidjson/**",
        ],
        exclude = [
            "third_party/rapidjson/BUILD.bazel",  # Hand-writing one.
            "third_party/rapidjson/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("", "third_party/rapidjson"),
        core.replace(
            before = "include \"${header}.h\"",
            after = "include \"third_party/rapidjson/include/rapidjson/${header}.h\"",
            regex_groups = {
                "header": r"[A-Za-z0-9\-_]+",
            },
            paths = glob([
                "third_party/rapidjson/include/rapidjson/*.h",
            ]),
        ),
        core.replace(
            before = "include \"${header}.h\"",
            after = "include \"third_party/rapidjson/include/rapidjson/error/${header}.h\"",
            regex_groups = {
                "header": r"[A-Za-z0-9\-_]+",
            },
            paths = glob([
                "third_party/rapidjson/include/rapidjson/error/*.h",
            ]),
        ),
        core.replace(
            before = "include \"${header}.h\"",
            after = "include \"third_party/rapidjson/include/rapidjson/internal/${header}.h\"",
            regex_groups = {
                "header": r"[A-Za-z0-9\-_]+",
            },
            paths = glob([
                "third_party/rapidjson/include/rapidjson/internal/*.h",
            ]),
        ),
        core.replace(
            before = "include \"${header}.h\"",
            after = "include \"third_party/rapidjson/include/rapidjson/msinttypes/${header}.h\"",
            regex_groups = {
                "header": r"[A-Za-z0-9\-_]+",
            },
            paths = glob([
                "third_party/rapidjson/include/rapidjson/msinttypes/*.h",
            ]),
        ),
        core.replace(
            before = "include \"rapidjson/${header}.h\"",
            after = "include \"third_party/rapidjson/include/rapidjson/${header}.h\"",
            regex_groups = {
                "header": r"[A-Za-z0-9\-_\/]+",
            },
            paths = glob([
                "**.h",
                "**.cpp",
            ]),
        ),
        core.replace(
            before = "include \"perftest.h\"",
            after = "include \"third_party/rapidjson/test/perftest/perftest.h\"",
            paths = glob([
                "third_party/rapidjson/test/perftest/*.cpp",
            ]),
        ),
        core.replace(
            before = "include \"unittest.h\"",
            after = "include \"third_party/rapidjson/test/unittest/unittest.h\"",
            paths = glob([
                "third_party/rapidjson/test/unittest/*.cpp",
            ]),
        ),
        core.replace(
            before = "include \"third_party/rapidjson/include/rapidjson/gtest/gtest.h\"",
            after = "include \"third_party/googletest/googletest/include/gtest/gtest.h\"",
            paths = glob([
                "third_party/rapidjson/test/perftest/*.cpp",
                "third_party/rapidjson/test/perftest/*.h",
            ]),
        ),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
    ],
)

core.workflow(
    name = "org_apache_thrift",  # 2019-10-12
    origin = git.origin(
        url = "https://github.com/apache/thrift",
        ref = "v0.13.0",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "lib/cpp/**",
        ],
        exclude = [
            "**/CMakeLists.txt",
            "**.cmakein",
        ],
    ),
    destination_files = glob(
        [
            "third_party/thrift/**",
        ],
        exclude = [
            "third_party/thrift/BUILD.bazel",  # Hand-writing one.
            "third_party/thrift/src/thrift/config.h",  # Hand-writing one.
            "third_party/thrift/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("lib/cpp/", "third_party/thrift"),
        core.replace(
            before = "${start}thrift/${header}${end}",
            after = "\"third_party/thrift/src/thrift/${header}\"",
            regex_groups = {
                "header": r"[A-Za-z0-9\-_\/]+.(h|tcc)",
                "start": "(\"|<)",
                "end": "(\"|>)",
            },
            paths = glob([
                "third_party/thrift/**.cpp",
                "third_party/thrift/**.h",
                "third_party/thrift/**.tcc",
            ]),
        ),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
        patch.apply([
            "third_party/thrift/patches/0001-build-with-boringssl.patch",
        ]),
    ],
)

core.workflow(
    name = "com_google_protobuf",  # 2021-03-12
    origin = git.origin(
        url = "https://github.com/protocolbuffers/protobuf/",
        ref = "v3.15.6",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "**",
        ],
        exclude = [
            "WORKSPACE",
            "**/CMakeLists.txt",
            "**.cmake",
            "**.cmakein",
            "**.cmake.in",
            "java/**",
            "js/**",
            "objectivec/**",
            "ruby/**",
        ],
    ),
    destination_files = glob(
        [
            "third_party/protobuf/**",
        ],
        exclude = [
            "third_party/protobuf/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("BUILD", "BUILD.bazel"),
        core.move("", "third_party/protobuf"),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
        patch.apply([
            "third_party/protobuf/patches/0000-only-build-cxx-python.patch",
            "third_party/protobuf/patches/0001-fix-test-data-loading.patch",
        ]),
    ],
)

core.workflow(
    name = "io_kythe",  # 2021-03-13
    origin = git.origin(
        url = "https://github.com/kythe/kythe",
        ref = "1b9d0266f395acfc6023322034deed8358aa26a7",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "kythe/cxx/common/init.h",
            "kythe/cxx/common/init.cc",
            "kythe/cxx/tools/generate_compile_commands/extract_compile_command.cc",
            "third_party/bazel/src/main/protobuf/extra_actions_base.proto",
            "tools/cpp/generate_compilation_database.sh",
        ],
        exclude = [
        ],
    ),
    destination_files = glob(
        [
            "third_party/kythe/**",
            "third_party/bazel/src/main/protobuf/extra_actions_base.proto",
            "tools/bin/generate_compilation_database.sh",
        ],
        exclude = [
            "third_party/kythe/BUILD.bazel",
            "third_party/bazel/src/main/protobuf/BUILD.bazel",
            "third_party/kythe/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("kythe", "third_party/kythe"),
        core.move("tools/cpp/generate_compilation_database.sh", "tools/bin/generate_compilation_database.sh"),
        core.replace(
            before = "include \"kythe/",
            after = "include \"third_party/kythe/",
            paths = glob([
                "**.cc",
                "**.h",
            ]),
        ),
        core.replace(
            before = "//kythe/cxx/tools/generate_compile_commands:extract_json",
            after = "//third_party/kythe:extract_json",
            paths = glob([
                "tools/bin/generate_compilation_database.sh",
            ]),
        ),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
    ],
)

core.workflow(
    name = "org_bzip_bzip2",  # 2020-09-12
    origin = git.origin(
        url = "https://gitlab.com/federicomenaquintero/bzip2.git",
        ref = "6211b6500c8bec13a17707440d3a84ca8b34eed5",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "**",
        ],
        exclude = [
            "cmake/**",
            "CMakeLists.txt",
            "CMakeOptions.txt",
        ],
    ),
    destination_files = glob(
        [
            "third_party/bzip2/**",
        ],
        exclude = [
            "third_party/bzip2/BUILD.bazel",
            "third_party/bzip2/bz_version.h",
            "third_party/bzip2/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("", "third_party/bzip2"),
        core.replace(
            before = "#${spaces1}include${spaces2}\"${header}\"",
            after = "#${spaces1}include${spaces2}\"third_party/bzip2/${header}\"",
            regex_groups = {
                "spaces1": r" *",
                "spaces2": r" +",
                "header": r"[A-Za-z0-9\-_\/]+\.h",
            },
            paths = glob([
                "**.c",
                "**.h",
            ]),
        ),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
    ],
)

core.workflow(
    name = "org_tukaani_xz",  # 2020-03-17
    origin = git.origin(
        url = "https://git.tukaani.org/xz.git",
        ref = "v5.2.5",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "**",
        ],
        exclude = [
        ],
    ),
    destination_files = glob(
        [
            "third_party/xz/**",
        ],
        exclude = [
            "third_party/xz/BUILD.bazel",
            # from https://github.com/nelhage/rules_boost/blob/c13a880269cc044c4b5e90046625339836771d77/config.lzma-linux.h
            "third_party/xz/config.h",
            "third_party/xz/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("", "third_party/xz"),
        core.replace(
            before = "#	include <config.h>",
            after = "# include \"third_party/xz/config.h\"",
            paths = glob([
                "third_party/xz/src/**.c",
                "third_party/xz/src/**.h",
            ]),
        ),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
    ],
)

core.workflow(
    name = "com_facebook_zstd",  # 2019-11-06
    origin = git.origin(
        url = "https://github.com/facebook/zstd/",
        ref = "v1.4.4",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "**",
        ],
        exclude = [
        ],
    ),
    destination_files = glob(
        [
            "third_party/zstd/**",
        ],
        exclude = [
            "third_party/zstd/BUILD.bazel",
            "third_party/zstd/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("", "third_party/zstd"),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
    ],
)

core.workflow(
    name = "com_google_boringssl",  # 2021-03-24
    origin = git.origin(
        url = "https://github.com/google/boringssl/",
        ref = "464e8eb557e9bc933a3928a439224d75634b0125",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "**",
        ],
        exclude = [
            "WORKSPACE",
            "src/third_party/googletest/**",
        ],
    ),
    destination_files = glob(
        [
            "third_party/boringssl/**",
        ],
        exclude = [
            "third_party/boringssl/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("", "third_party/boringssl"),
        core.move("third_party/boringssl/BUILD", "third_party/boringssl/BUILD.bazel"),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
    ],
)

core.workflow(
    name = "com_github_microsoft_cpprestsdk",  # 2021-02-02
    origin = git.origin(
        url = "https://github.com/microsoft/cpprestsdk",
        ref = "v2.10.18",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "Release/**",
        ],
        exclude = [
        ],
    ),
    destination_files = glob(
        [
            "third_party/cpprestsdk/**",
        ],
        exclude = [
            "third_party/cpprestsdk/BUILD.bazel",
            "third_party/cpprestsdk/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("Release", "third_party/cpprestsdk"),
        core.replace(
            before = "#include \"stdafx.h\"",
            after = "#include \"third_party/cpprestsdk/src/pch/stdafx.h\"",
            paths = glob([
                "third_party/cpprestsdk/**.cpp",
                "third_party/cpprestsdk/**.h",
            ]),
        ),
        core.replace(
            before = "#include \"../common/x509_cert_utilities.h\"",
            after = "#include \"third_party/cpprestsdk/src/http/common/x509_cert_utilities.h\"",
            paths = glob(["third_party/cpprestsdk/src/http/client/x509_cert_utilities.cpp"]),
        ),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
    ],
)

core.workflow(
    name = "com_github_xtensor_stack_xsimd",  # 2021-04-21
    origin = git.origin(
        url = "https://github.com/xtensor-stack/xsimd",
        ref = "7.5.0",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "include/xsimd/**",
        ],
        exclude = [
        ],
    ),
    destination_files = glob(
        [
            "third_party/xsimd/**",
        ],
        exclude = [
            "third_party/xsimd/BUILD.bazel",
            "third_party/xsimd/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("include/xsimd", "third_party/xsimd"),
        core.replace(
            before = "#include \"${header}\"",
            after = "#include \"third_party/xsimd/config/${header}\"",
            paths = glob([
                "third_party/xsimd/config/**.hpp",
            ]),
            regex_groups = {
                "header": r"[A-Za-z0-9\-_\/]+.hpp",
            },
        ),
        core.replace(
            before = "#include \"${header}\"",
            after = "#include \"third_party/xsimd/math/${header}\"",
            paths = glob([
                "third_party/xsimd/math/**.hpp",
            ]),
            regex_groups = {
                "header": r"[A-Za-z0-9\-_\/]+.hpp",
            },
        ),
        core.replace(
            before = "#include \"${header}\"",
            after = "#include \"third_party/xsimd/memory/${header}\"",
            paths = glob([
                "third_party/xsimd/memory/**.hpp",
            ]),
            regex_groups = {
                "header": r"[A-Za-z0-9\-_\/]+.hpp",
            },
        ),
        core.replace(
            before = "#include \"${header}\"",
            after = "#include \"third_party/xsimd/stl/${header}\"",
            paths = glob([
                "third_party/xsimd/stl/**.hpp",
            ]),
            regex_groups = {
                "header": r"[A-Za-z0-9\-_\/]+.hpp",
            },
        ),
        core.replace(
            before = "#include \"${header}\"",
            after = "#include \"third_party/xsimd/types/${header}\"",
            paths = glob([
                "third_party/xsimd/types/**.hpp",
            ]),
            regex_groups = {
                "header": r"[A-Za-z0-9\-_\/]+.hpp",
            },
        ),
        core.replace(
            before = "#include \"third_party/xsimd/${folder}/xsimd/${header}\"",
            after = "#include \"third_party/xsimd/${header}\"",
            paths = glob([
                "third_party/xsimd/**/*.hpp",
            ]),
            regex_groups = {
                "header": r"[A-Za-z0-9\-_\/]+.hpp",
                "folder": r"[A-Za-z0-9\-_]+",
            },
        ),
        core.replace(
            before = "#include \"${header}\"",
            after = "#include \"third_party/xsimd/${header}\"",
            paths = glob([
                "third_party/xsimd/xsimd.hpp",
            ]),
            regex_groups = {
                "header": r"[A-Za-z0-9\-_\/]+.hpp",
            },
        ),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
    ],
)

core.workflow(
    name = "com_github_fmtlib_fmt",  # 2021-07-02T23:23:15Z
    origin = git.origin(
        url = "https://github.com/fmtlib/fmt",
        ref = "8.0.1",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "include/fmt/**",
            "src/**",
            "test/**",
        ],
        exclude = [
            "test/add-subdirectory-test/**",
            "test/find-package-test/**",
            "test/gtest/**",
        ],
    ),
    destination_files = glob(
        [
            "third_party/fmt/**",
        ],
        exclude = [
            "third_party/fmt/BUILD.bazel",
            "third_party/fmt/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("include/fmt", "third_party/fmt"),
        core.move("src", "third_party/fmt"),
        core.move("test", "third_party/fmt/test"),
        core.replace(
            before = "#include \"${header}\"",
            after = "#include \"third_party/fmt/${header}\"",
            regex_groups = {
                "header": r"[A-Za-z0-9\-_\/]+.h",
            },
            paths = glob([
                "third_party/fmt/*.cc",
            ]),
        ),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
        core.replace(
            before = "${start}third_party/fmt/fmt/${header}${end}",
            after = "\"third_party/fmt/${header}\"",
            regex_groups = {
                "header": r"[A-Za-z0-9\-_\/]+.h",
                "start": "(\"|<)",
                "end": "(\"|>)",
            },
            paths = glob([
                "third_party/fmt/*.cc",
            ]),
        ),
        core.replace(
            before = "${start}${header}${end}",
            after = "\"third_party/fmt/test/${header}\"",
            regex_groups = {
                "header": r"(gtest-extra|mock-allocator|posix-mock|scan|test-assert|util).h",
                "start": "(\"|<)",
                "end": "(\"|>)",
            },
            paths = glob([
                "third_party/fmt/test/**.h",
                "third_party/fmt/test/**.cc",
            ]),
        ),
    ],
)

core.workflow(
    name = "com_github_gabime_spdlog",  # 2021-03-25T19:06:22Z
    origin = git.origin(
        url = "https://github.com/gabime/spdlog",
        ref = "v1.8.5",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "bench/**",
            "example/**",
            "include/spdlog/**",
            "src/**",
            "tests/**",
        ],
        exclude = [
            "include/spdlog/fmt/bundled/**",
        ],
    ),
    destination_files = glob(
        [
            "third_party/spdlog/**",
        ],
        exclude = [
            "third_party/spdlog/BUILD.bazel",
            "third_party/spdlog/**/BUILD.bazel",
            "third_party/spdlog/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("", "third_party/spdlog"),
        core.move("third_party/spdlog/include/spdlog", "third_party/spdlog"),
        core.move("third_party/spdlog/src", "third_party/spdlog"),
        core.replace(
            before = "#include \"${header}\"",
            after = "#include \"third_party/spdlog/${header}\"",
            regex_groups = {
                "header": r"[A-Za-z0-9\-_\/]+.h",
            },
            paths = glob([
                "third_party/spdlog/*.cpp",
            ]),
        ),
        core.replace(
            before = "#include \"utils.h\"",
            after = "#include \"third_party/spdlog/bench/utils.h\"",
            paths = glob([
                "third_party/spdlog/bench/*.cpp",
            ]),
        ),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
        core.replace(
            before = "#include \"third_party/spdlog/spdlog/",
            after = "#include \"third_party/spdlog/",
            paths = glob([
                "third_party/spdlog/*.cpp",
            ]),
        ),
        patch.apply(patches = [
            "third_party/spdlog/patches/0001-adapt-fmt-v8.patch",
        ]),
    ],
)

core.workflow(
    name = "com_github_microsoft_gsl",  # 2020-06-04T20:39:07Z
    origin = git.origin(
        url = "https://github.com/microsoft/GSL",
        ref = "v3.1.0",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "include/gsl/**",
            "tests/**",
        ],
        exclude = [
        ],
    ),
    destination_files = glob(
        [
            "third_party/gsl/**",
        ],
        exclude = [
            "third_party/gsl/BUILD.bazel",
            "third_party/gsl/patches/**",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("include/gsl", "third_party/gsl"),
        core.move("tests/", "third_party/gsl"),
        core.replace(
            before = "#include ${start}gsl/${header}${end}",
            after = "#include \"third_party/gsl/${header}\"",
            regex_groups = {
                "header": r"[A-Za-z0-9\-_\/]+",
                "start": "(\"|<)",
                "end": "(\"|>)",
            },
        ),
    ] + THIRD_PARTY_REPLACEMENT_TRANSFORMATIONS + [
    ],
)

core.workflow(
    name = "gtl_tensorflow",
    origin = git.origin(
        url = "https://github.com/tensorflow/tensorflow.git",
        ref = "v2.2.0",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "tensorflow/core/lib/gtl/iterator_range.h",
            "tensorflow/core/lib/gtl/iterator_range_test.cc",
            "tensorflow/core/lib/gtl/subtle/map_traits.h",
            "tensorflow/core/lib/gtl/map_util.h",
            "tensorflow/core/lib/gtl/map_util_test.cc",
            "tensorflow/core/lib/gtl/priority_queue_util.h",
            "tensorflow/core/lib/gtl/top_n.h",
            "tensorflow/core/lib/gtl/top_n_test.cc",
            "tensorflow/core/platform/file_statistics.h",
            "tensorflow/core/platform/file_system.h",
            "tensorflow/core/platform/file_system.cc",
            "tensorflow/core/platform/file_system_helper.h",
            "tensorflow/core/platform/file_system_helper.cc",
            "tensorflow/core/platform/file_system_test.cc",
            "tensorflow/core/platform/null_file_system.h",
            "tensorflow/core/platform/default/posix_file_system.h",
            "tensorflow/core/platform/default/posix_file_system.cc",
            "tensorflow/core/platform/scanner.h",
            "tensorflow/core/platform/scanner.cc",
            "tensorflow/core/platform/scanner_test.cc",
            "tensorflow/core/platform/path.h",
            "tensorflow/core/platform/path.cc",
            "tensorflow/core/lib/io/path_test.cc",
        ],
    ),
    destination_files = glob(
        [
            "gtl/iterator_range.h",
            "gtl/iterator_range_test.cc",
            "gtl/map_traits.h",
            "gtl/map_util.h",
            "gtl/map_util_test.cc",
            "gtl/priority_queue_util.h",
            "gtl/top_n.h",
            "gtl/top_n_test.cc",
            "gtl/file_statistics.h",
            "gtl/file_system.h",
            "gtl/file_system.cc",
            "gtl/file_system_helper.h",
            "gtl/file_system_helper.cc",
            "gtl/file_system_test.cc",
            "gtl/null_file_system.h",
            "gtl/posix_file_system.h",
            "gtl/posix_file_system.cc",
            "gtl/scanner.h",
            "gtl/scanner.cc",
            "gtl/scanner_test.cc",
            "gtl/path.h",
            "gtl/path.cc",
            "gtl/path_test.cc",
        ],
        exclude = [
            "**/BUILD.bazel",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("tensorflow/core/lib/gtl/subtle/map_traits.h", "gtl/map_traits.h"),
        core.move("tensorflow/core/lib/io/path_test.cc", "gtl/path_test.cc"),
        core.move("tensorflow/core/lib/gtl", "gtl"),
        core.move("tensorflow/core/platform/default", "gtl"),
        core.move("tensorflow/core/platform", "gtl"),
        core.replace(
            before = "#include \"tensorflow/core/lib/gtl/subtle/map_traits.h\"",
            after = "#include \"gtl/map_traits.h\"",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "#include \"tensorflow/core/platform/logging.h\"",
            after = "#include \"glog/logging.h\"",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "#include \"tensorflow/core/lib/gtl/${filename}.h\"",
            after = "#include \"gtl/${filename}.h\"",
            regex_groups = {"filename": "[^\\.>\"]*"},
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "#include \"tensorflow/core/platform/test.h\"",
            after = "#include \"gtest/gtest.h\"",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "#include \"tensorflow/core/platform/${filename}.h\"",
            after = "#include \"gtl/${filename}.h\"",
            regex_groups = {"filename": "[^\\.>\"]*"},
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "StringPiece",
            after = "absl::string_view",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "namespace tensorflow {",
            after = "",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "}  // namespace tensorflow",
            after = "",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "namespace subtle {",
            after = "",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "}  // namespace subtle",
            after = "",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "subtle::",
            after = "",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "TENSORFLOW_CORE_LIB_GTL_SUBTLE_MAP_TRAITS_H_",
            after = "GTL_MAP_TRAITS_H_",
            paths = glob(["gtl/map_traits.h"]),
        ),
        core.replace(
            before = "TENSORFLOW_CORE_LIB_GTL_",
            after = "GTL_",
            paths = glob(["**/*.h"]),
        ),
        core.replace(
            before = "TENSORFLOW_LIB_GTL_",
            after = "GTL_",
            paths = glob(["**/*.h"]),
        ),
        core.replace(
            before = "TENSORFLOW_CORE_PLATFORM_POSIX_",
            after = "GTL_",
            paths = glob(["**/*.h"]),
        ),
        core.replace(
            before = "TENSORFLOW_CORE_PLATFORM_",
            after = "GTL_",
            paths = glob(["**/*.h"]),
        ),
        core.replace(
            before = "PLATFORM_WINDOWS",
            after = "OS_WIN",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "PLATFORM_POSIX",
            after = "OS_POSIX",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        patch.apply(patches = [
            "gtl/patches/tensorflow/file_system.patch",
            "gtl/patches/tensorflow/iterator_range.patch",
            "gtl/patches/tensorflow/map_util.patch",
            "gtl/patches/tensorflow/path.patch",
            "gtl/patches/tensorflow/scanner.patch",
            "gtl/patches/tensorflow/top_n.patch",
            "gtl/patches/tensorflow/file_system_fix_warning.patch",
        ]),
    ],
)

core.workflow(
    name = "gtl_chromium",
    # origin = git.origin(
    #     url = "https://github.com/chromium/chromium.git",
    #     ref = "2dcb87aab462363932219cc2e9c6d11dcd2c8452",  # 2020-07-02
    # ),
    # Download from https://chromium.googlesource.com/chromium/src.git/+archive/2dcb87aab462363932219cc2e9c6d11dcd2c8452.tar.gz
    origin = folder.origin(),
    destination = folder.destination(),
    origin_files = glob(
        [
            "base/atomic_sequence_num.h",
            "base/auto_reset.h",
            "base/auto_reset_unittest.cc",
            "base/bits.h",
            "base/bits_unittest.cc",
            "base/compiler_specific.h",
            "base/guid.h",
            "base/guid.cc",
            "base/guid_unittest.cc",
            "base/location.h",
            "base/location.cc",
            "base/location_unittest.cc",
            "base/macros.h",
            "base/no_destructor.h",
            "base/no_destructor_unittest.cc",
            "base/sequence_checker.h",
            "base/sequence_checker_impl.h",
            "base/sequence_checker_impl.cc",
            "base/sequence_checker_unittest.cc",
            "base/sequence_checker_unittest.nc",
            "base/sequence_token.h",
            "base/sequence_token.cc",
            "base/sequence_token_unittest.cc",
            "base/thread_annotations.h",
            "base/thread_annotations_unittest.cc",
            "base/thread_annotations_unittest.nc",
            "base/threading/thread_checker.h",
            "base/threading/thread_checker_impl.h",
            "base/threading/thread_checker_impl.cc",
            "base/threading/thread_checker_unittest.cc",
            "base/containers/circular_deque.h",
            "base/containers/circular_deque_unittest.cc",
            "base/containers/ring_buffer.h",
            "base/containers/id_map.h",
            "base/containers/id_map_unittest.cc",
            "base/containers/util.h",
            "base/containers/vector_buffer.h",
            "base/containers/vector_buffer_unittest.cc",
            "base/hash/sha1.h",
            "base/hash/sha1_boringssl.cc",
            "base/hash/sha1_unittest.cc",
            "base/numerics/checked_math.h",
            "base/numerics/checked_math_impl.h",
            "base/numerics/clamped_math.h",
            "base/numerics/clamped_math_impl.h",
            "base/numerics/ranges.h",
            "base/numerics/safe_conversions.h",
            "base/numerics/safe_conversions_impl.h",
            "base/numerics/safe_math.h",
            "base/numerics/safe_math_clang_gcc_impl.h",
            "base/numerics/safe_math_shared_impl.h",
            "base/safe_numerics_unittest.cc",
            "base/test/copy_only_int.h",
            "base/test/copy_only_int.cc",
            "base/test/gtest_util.h",
            "base/test/move_only_int.h",
            "base/stl_util.h",
            "base/stl_util_unittest.cc",
            "base/template_util.h",
            "base/template_util_unittest.cc",
            "crypto/openssl_util.h",
            "crypto/openssl_util.cc",
            "crypto/secure_hash.h",
            "crypto/secure_hash.cc",
            "crypto/secure_hash_unittest.cc",
            "crypto/sha2.h",
            "crypto/sha2.cc",
            "crypto/sha2_unittest.cc",
        ],
    ),
    destination_files = glob(
        [
            "gtl/atomic_sequence_num.h",
            "gtl/auto_reset.h",
            "gtl/auto_reset_unittest.cc",
            "gtl/bits.h",
            "gtl/bits_unittest.cc",
            "gtl/compiler_specific.h",
            "gtl/guid.h",
            "gtl/guid.cc",
            "gtl/guid_unittest.cc",
            "gtl/location.h",
            "gtl/location.cc",
            "gtl/location_unittest.cc",
            "gtl/macros.h",
            "gtl/no_destructor.h",
            "gtl/no_destructor_unittest.cc",
            "gtl/sequence_checker.h",
            "gtl/sequence_checker_impl.h",
            "gtl/sequence_checker_impl.cc",
            "gtl/sequence_checker_unittest.cc",
            "gtl/sequence_checker_unittest.nc",
            "gtl/sequence_token.h",
            "gtl/sequence_token.cc",
            "gtl/sequence_token_unittest.cc",
            "gtl/thread_annotations.h",
            "gtl/thread_annotations_unittest.cc",
            "gtl/thread_annotations_unittest.nc",
            "gtl/thread_checker.h",
            "gtl/thread_checker_impl.h",
            "gtl/thread_checker_impl.cc",
            "gtl/thread_checker_unittest.cc",
            "gtl/crypto/openssl_util.h",
            "gtl/crypto/openssl_util.cc",
            "gtl/crypto/secure_hash.h",
            "gtl/crypto/secure_hash.cc",
            "gtl/crypto/secure_hash_unittest.cc",
            "gtl/crypto/sha2.h",
            "gtl/crypto/sha2.cc",
            "gtl/crypto/sha2_unittest.cc",
            "gtl/container/circular_deque.h",
            "gtl/container/circular_deque_unittest.cc",
            "gtl/container/ring_buffer.h",
            "gtl/container/id_map.h",
            "gtl/container/id_map_unittest.cc",
            "gtl/container/util.h",
            "gtl/container/vector_buffer.h",
            "gtl/container/vector_buffer_unittest.cc",
            "gtl/hash/sha1.h",
            "gtl/hash/sha1_boringssl.cc",
            "gtl/hash/sha1_unittest.cc",
            "gtl/numeric/checked_math.h",
            "gtl/numeric/checked_math_impl.h",
            "gtl/numeric/clamped_math.h",
            "gtl/numeric/clamped_math_impl.h",
            "gtl/numeric/ranges.h",
            "gtl/numeric/safe_conversions.h",
            "gtl/numeric/safe_conversions_impl.h",
            "gtl/numeric/safe_math.h",
            "gtl/numeric/safe_math_clang_gcc_impl.h",
            "gtl/numeric/safe_math_shared_impl.h",
            "gtl/numeric/safe_numerics_unittest.cc",
            "gtl/test/copy_only_int.h",
            "gtl/test/copy_only_int.cc",
            "gtl/test/gtest_util.h",
            "gtl/test/move_only_int.h",
            "gtl/stl_util.h",
            "gtl/stl_util_unittest.cc",
            "gtl/template_util.h",
            "gtl/template_util_unittest.cc",
        ],
        exclude = [
            "**/BUILD.bazel",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("base/safe_numerics_unittest.cc", "gtl/numeric/safe_numerics_unittest.cc"),
        core.move("base/containers", "gtl/container"),
        core.move("base/numerics", "gtl/numeric"),
        core.move("base/threading", "gtl"),
        core.move("base", "gtl"),
        core.move("crypto", "gtl/crypto"),
        # Remove BASE_EXPORT
        core.replace(
            before = "#include \"base/base_export.h\"",
            after = "",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "BASE_EXPORT ",
            after = "",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        # Remove BASE_EXPORT
        core.replace(
            before = "#include \"crypto/crypto_export.h\"",
            after = "",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "CRYPTO_EXPORT ",
            after = "",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        # Code replacements
        core.replace(
            before = "char16",
            after = "char16_t",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "base::span",
            after = "absl::Span",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "base::StringPiece16",
            after = "std::u16string_view",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "base::StringPiece",
            after = "absl::string_view",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "StringPiece&",
            after = "absl::string_view&",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "base::Lock",
            after = "absl::Mutex",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "base::AutoLock",
            after = "absl::MutexLock",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "base::AutoLock auto_lock(lock_)",
            after = "absl::MutexLock mutex_lock(&lock_)",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "AutoLock auto_lock(lock_)",
            after = "absl::MutexLock mutex_lock(&lock_)",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "base::flat_set",
            after = "absl::flat_hash_set",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        # optional
        core.replace(
            before = "#include \"base/optional.h\"",
            after = "#include \"third_party/absl/types/optional.h\"",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "base::Optional<",
            after = "absl::optional<",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        # build_config header path
        core.replace(
            before = "#include \"build/build_config.h\"",
            after = "#include \"config/config.h\"",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        # absl header paths
        core.replace(
            before = "#include \"base/strings/string_piece.h\"",
            after = "#include \"third_party/absl/strings/string_view.h\"",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "#include \"base/synchronization/lock.h\"",
            after = "#include \"third_party/absl/synchronization/mutex.h\"",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "#include \"base/containers/span.h\"",
            after = "#include \"third_party/absl/types/span.h\"",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "#include \"base/containers/flat_set.h\"",
            after = "#include \"third_party/absl/container/flat_hash_set.h\"",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        # glog header paths
        core.replace(
            before = "#include \"base/check_op.h\"",
            after = "#include \"glog/logging.h\"",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "#include \"base/logging.h\"",
            after = "#include \"glog/logging.h\"",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "#include \"base/check.h\"",
            after = "#include \"glog/logging.h\"",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        # gtest header path
        core.replace(
            before = "#include \"testing/gtest/include/gtest/gtest.h\"",
            after = "#include \"gtest/gtest.h\"",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        # gmock header path
        core.replace(
            before = "#include \"testing/gmock/include/gmock/gmock.h\"",
            after = "#include \"gmock/gmock.h\"",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        # boringssl header path
        core.replace(
            before = "#include \"third_party/boringssl/src/include/openssl/",
            after = "#include \"openssl/",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        # General header paths
        core.replace(
            before = "#include \"base/containers/${filename}.h\"",
            after = "#include \"gtl/container/${filename}.h\"",
            regex_groups = {"filename": "[^\\.>\"]*"},
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "#include \"crypto/${filename}.h\"",
            after = "#include \"gtl/crypto/${filename}.h\"",
            regex_groups = {"filename": "[^\\.>\"]*"},
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "#include \"base/hash/${filename}.h\"",
            after = "#include \"gtl/hash/${filename}.h\"",
            regex_groups = {"filename": "[^\\.>\"]*"},
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "#include \"base/threading/${filename}.h\"",
            after = "#include \"gtl/${filename}.h\"",
            regex_groups = {"filename": "[^\\.>\"]*"},
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "#include \"base/numerics/${filename}.h\"",
            after = "#include \"gtl/numeric/${filename}.h\"",
            regex_groups = {"filename": "[^\\.>\"]*"},
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "#include \"base/${filename}.h\"",
            after = "#include \"gtl/${filename}.h\"",
            regex_groups = {"filename": "[^\\.>\"]*"},
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        # GUARDED_BY -> ABSL_GUARDED_BY
        core.replace(
            before = " GUARDED_BY_CONTEXT",
            after = " GTL_GUARDED_BY_CONTEXT",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = " VALID_CONTEXT_REQUIRED",
            after = " GTL_VALID_CONTEXT_REQUIRED",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = " GUARDED_BY",
            after = " ABSL_GUARDED_BY",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = " EXCLUSIVE_LOCKS_REQUIRED",
            after = " ABSL_EXCLUSIVE_LOCKS_REQUIRED",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        # Fix namespaces
        core.replace(
            before = "namespace base {",
            after = "namespace gtl {",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "}  // namespace base",
            after = "}  // namespace gtl",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "base::",
            after = "gtl::",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "crypto::",
            after = "gtl::crypto::",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        # Fix header guards
        core.replace(
            before = " BASE_THREADING_",
            after = " GTL_",
            paths = glob(["**/*.h"]),
        ),
        core.replace(
            before = " BASE_CONTAINERS_",
            after = " GTL_CONTAINER_",
            paths = glob(["**/*.h"]),
        ),
        core.replace(
            before = "BASE_NUMERICS_LIKELY",
            after = "GTL_NUMERIC_LIKELY",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "BASE_NUMERICS_UNLIKELY",
            after = "GTL_NUMERIC_UNLIKELY",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = " BASE_NUMERICS_",
            after = " GTL_NUMERIC_",
            paths = glob(["**/*.h"]),
        ),
        core.replace(
            before = "BASE_NUMERIC_COMPARISON_OPERATORS",
            after = "GTL_NUMERIC_COMPARISON_OPERATORS",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "BASE_HAS_OPTIMIZED_SAFE_MATH",
            after = "GTL_HAS_OPTIMIZED_SAFE_MATH",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "BASE_NUMERIC_ARITHMETIC_OPERATORS",
            after = "GTL_NUMERIC_ARITHMETIC_OPERATORS",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "BASE_NUMERIC_ARITHMETIC_VARIADIC",
            after = "GTL_NUMERIC_ARITHMETIC_VARIADIC",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = "BASE_FLOAT_ARITHMETIC_OPS",
            after = "GTL_FLOAT_ARITHMETIC_OPS",
            paths = glob(["**/*.h", "**/*.cc", "**/*.nc"]),
        ),
        core.replace(
            before = " BASE_",
            after = " GTL_",
            paths = glob(["**/*.h"]),
        ),
        core.replace(
            before = " CRYPTO_",
            after = " GTL_CRYPTO_",
            paths = glob(["**/*.h"]),
        ),
        # Finally patches
        patch.apply(patches = [
            "gtl/patches/chromium/guid.patch",
            "gtl/patches/chromium/no_destructor.patch",
            "gtl/patches/chromium/sequence_token.patch",
            "gtl/patches/chromium/sequence_checker.patch",
            "gtl/patches/chromium/thread_annotations.patch",
            "gtl/patches/chromium/thread_checker.patch",
            "gtl/patches/chromium/sha1.patch",
            "gtl/patches/chromium/id_map.patch",
            "gtl/patches/chromium/circular_deque.patch",
            "gtl/patches/chromium/vector_buffer.patch",
            "gtl/patches/chromium/location.patch",
            "gtl/patches/chromium/secure_hash.patch",
            "gtl/patches/chromium/crypto_gtl_namespace.patch",
            "gtl/patches/chromium/template_util.patch",
            "gtl/patches/chromium/stl_util.patch",
        ]),
    ],
)
