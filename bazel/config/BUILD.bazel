# Copyright (c) 2022 Zhang Shuai<zhangshuai.ustc@gmail.com>.
# All rights reserved.
#
# This file is part of ONE.
#
# ONE is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# ONE is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# ONE. If not, see <https://www.gnu.org/licenses/>.

load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag", "string_flag")

string_flag(
    name = "simd_level",
    build_setting_default = "sse2",
    values = [
        "mmx",
        "sse2",
        "sse42",
        "avx",
        "avx2",
        "avx512f",
    ],
)

config_setting(
    name = "enable_mmx",
    flag_values = {
        ":simd_level": "mmx",
    },
)

config_setting(
    name = "enable_sse2",
    flag_values = {
        ":simd_level": "sse2",
    },
)

config_setting(
    name = "enable_sse42",
    flag_values = {
        ":simd_level": "sse42",
    },
)

config_setting(
    name = "enable_avx",
    flag_values = {
        ":simd_level": "avx",
    },
)

config_setting(
    name = "enable_avx2",
    flag_values = {
        ":simd_level": "avx2",
    },
)

config_setting(
    name = "enable_avx512f",
    flag_values = {
        ":simd_level": "avx512f",
    },
)

selects.config_setting_group(
    name = "enable_mmx_or_later",
    match_any = [
        ":enable_mmx",
        ":enable_sse2",
        ":enable_sse42",
        ":enable_avx",
        ":enable_avx2",
        ":enable_avx512f",
    ],
)

selects.config_setting_group(
    name = "enable_sse2_or_later",
    match_any = [
        ":enable_sse2",
        ":enable_sse42",
        ":enable_avx",
        ":enable_avx2",
        ":enable_avx512f",
    ],
)

selects.config_setting_group(
    name = "enable_sse42_or_later",
    match_any = [
        ":enable_sse42",
        ":enable_avx",
        ":enable_avx2",
        ":enable_avx512f",
    ],
)

selects.config_setting_group(
    name = "enable_avx_or_later",
    match_any = [
        ":enable_avx",
        ":enable_avx2",
        ":enable_avx512f",
    ],
)

selects.config_setting_group(
    name = "enable_avx2_or_later",
    match_any = [
        ":enable_avx2",
        ":enable_avx512f",
    ],
)

selects.config_setting_group(
    name = "enable_avx512f_or_later",
    match_any = [
        ":enable_avx512f",
    ],
)

bool_flag(
    name = "bmi2",
    build_setting_default = False,
    visibility = ["//visibility:public"],
)

config_setting(
    name = "enable_bmi2",
    flag_values = {
        ":bmi2": "true",
    },
)

bool_flag(
    name = "pclmul",
    build_setting_default = False,
    visibility = ["//visibility:public"],
)

config_setting(
    name = "enable_pclmul",
    flag_values = {
        ":pclmul": "true",
    },
)

bool_flag(
    name = "aes",
    build_setting_default = False,
    visibility = ["//visibility:public"],
)

config_setting(
    name = "enable_aes",
    flag_values = {
        ":aes": "true",
    },
)

bool_flag(
    name = "rdrand",
    build_setting_default = False,
    visibility = ["//visibility:public"],
)

config_setting(
    name = "enable_rdrand",
    flag_values = {
        ":rdrand": "true",
    },
)

config_setting(
    name = "with_asan",
    define_values = {
        "ONE_CONFIG_ASAN": "1",
    },
)

config_setting(
    name = "with_tsan",
    define_values = {
        "ONE_CONFIG_TSAN": "1",
    },
)

config_setting(
    name = "with_msan",
    define_values = {
        "ONE_CONFIG_MSAN": "1",
    },
)

selects.config_setting_group(
    name = "with_sanitizer",
    match_any = [
        ":with_asan",
        ":with_tsan",
        ":with_msan",
    ],
)
