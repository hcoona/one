# Default build options. These are applied first and unconditionally.
build --cxxopt="-std=c++14" --cxxopt="-Wno-c++17-extensions" --cxxopt="-Wno-undef"
build --conlyopt="-std=c11"

# build --proto_compiler=//third_party/protobuf:protoc
# build --proto_toolchain_for_cc=//third_party/protobuf:cc_toolchain
# build --proto_toolchain_for_java=//third_party/protobuf:java_toolchain
# build --proto_toolchain_for_javalite=//third_party/protobuf:javalite_toolchain

# TODO(zhangshuai.ustc): Enable it for non-third_party targets.
# Strict dependency check for C++ includes.
# build --features=layering_check

# Enable position independent code (this is the default on macOS and Windows)
# (Workaround for https://github.com/bazelbuild/rules_foreign_cc/issues/421)
build --copt=-fPIC
build --fission=dbg,opt
build --features=per_object_debug_info
build --action_env=BAZEL_LINKLIBS=-l%:libstdc++.a
build --action_env=BAZEL_LINKOPTS=-lm

# We already have absl in the build, define absl=1 to tell googletest to use absl for backtrace.
build --define absl=1

# For grpc.
build --copt=-DGRPC_BAZEL_BUILD

# For brpc.
build --define=with_glog=true
build --copt -DHAVE_ZLIB=1

# Pass PATH, CC, CXX and LLVM_CONFIG variables from the environment.
build --action_env=CC
build --action_env=CXX
build --action_env=LLVM_CONFIG
build --action_env=PATH

build --action_env=CC=clang --action_env=CXX=clang++
build:gcc --action_env=CC=gcc --action_env=CXX=g++

# Default options should come above this line.

# Common flags for Clang
build:clang --action_env=BAZEL_COMPILER=clang
build:clang --linkopt=-fuse-ld=lld

# Clang with libc++
build:libc++ --config=clang
build:libc++ --action_env=CXXFLAGS=-stdlib=libc++
build:libc++ --action_env=LDFLAGS=-stdlib=libc++
build:libc++ --action_env=BAZEL_CXXOPTS=-stdlib=libc++
build:libc++ --action_env=BAZEL_LINKLIBS=-lc++:-lc++abi
build:libc++ --action_env=BAZEL_LINKOPTS=-lm:-pthread
build:libc++ --define force_libcpp=enabled

try-import %workspace%/clang.bazelrc

# Common flags for sanitizers
build:sanitizer --linkopt -ldl
build:sanitizer --build_tag_filters=-no_san
build:sanitizer --test_tag_filters=-no_san
build:sanitizer --strip=never
build:sanitizer --copt -g
build:sanitizer --copt -O3
build:sanitizer --copt -fno-omit-frame-pointer

# Address sanitizer
build:asan --config=sanitizer
build:asan --copt -fsanitize=address
build:asan --copt -DADDRESS_SANITIZER
build:asan --linkopt -fsanitize=address

# Memory sanitizer
build:msan --config=sanitizer
build:msan --copt -fsanitize=memory
build:msan --copt -DMEMORY_SANITIZER
build:msan --linkopt -fsanitize=memory

# Undefined Behavior Sanitizer
build:ubsan --config=sanitizer
build:ubsan --copt -fsanitize=undefined
build:ubsan --copt -DUNDEFINED_BEHAVIOR_SANITIZER
build:ubsan --linkopt -fsanitize=undefined
build:ubsan --linkopt -lubsan

# LibFuzzer + ASAN
build:asan-libfuzzer --@rules_fuzzing//fuzzing:cc_engine=@rules_fuzzing//fuzzing/engines:libfuzzer
build:asan-libfuzzer --@rules_fuzzing//fuzzing:cc_engine_instrumentation=libfuzzer
build:asan-libfuzzer --@rules_fuzzing//fuzzing:cc_engine_sanitizer=asan

# LibFuzzer + MSAN
build:msan-libfuzzer --@rules_fuzzing//fuzzing:cc_engine=@rules_fuzzing//fuzzing/engines:libfuzzer
build:msan-libfuzzer --@rules_fuzzing//fuzzing:cc_engine_instrumentation=libfuzzer
build:msan-libfuzzer --@rules_fuzzing//fuzzing:cc_engine_sanitizer=msan
