diff --git a/absl/base/dynamic_annotations.cc b/absl/base/dynamic_annotations.cc
index f26e673..aca0d1a 100644
--- a/absl/base/dynamic_annotations.cc
+++ b/absl/base/dynamic_annotations.cc
@@ -29,7 +29,7 @@
 
 extern "C" {
 
-static int GetRunningOnValgrind(void) {
+static int AbslGetRunningOnValgrind(void) {
 #ifdef RUNNING_ON_VALGRIND
   if (RUNNING_ON_VALGRIND) return 1;
 #endif
@@ -41,24 +41,24 @@ static int GetRunningOnValgrind(void) {
 }
 
 // See the comments in dynamic_annotations.h
-int RunningOnValgrind(void) {
+int AbslRunningOnValgrind(void) {
   static volatile int running_on_valgrind = -1;
   int local_running_on_valgrind = running_on_valgrind;
   // C doesn't have thread-safe initialization of statics, and we
   // don't want to depend on pthread_once here, so hack it.
   ANNOTATE_BENIGN_RACE(&running_on_valgrind, "safe hack");
   if (local_running_on_valgrind == -1)
-    running_on_valgrind = local_running_on_valgrind = GetRunningOnValgrind();
+    running_on_valgrind = local_running_on_valgrind = AbslGetRunningOnValgrind();
   return local_running_on_valgrind;
 }
 
 // See the comments in dynamic_annotations.h
-double ValgrindSlowdown(void) {
-  // Same initialization hack as in RunningOnValgrind().
+double AbslValgrindSlowdown(void) {
+  // Same initialization hack as in AbslRunningOnValgrind().
   static volatile double slowdown = 0.0;
   double local_slowdown = slowdown;
   ANNOTATE_BENIGN_RACE(&slowdown, "safe hack");
-  if (RunningOnValgrind() == 0) {
+  if (AbslRunningOnValgrind() == 0) {
     return 1.0;
   }
   if (local_slowdown == 0.0) {
diff --git a/absl/base/dynamic_annotations.h b/absl/base/dynamic_annotations.h
index 1444dc4..6de2e58 100644
--- a/absl/base/dynamic_annotations.h
+++ b/absl/base/dynamic_annotations.h
@@ -444,24 +444,24 @@ ABSL_INTERNAL_BEGIN_EXTERN_C
 //  If for some reason you can't use "valgrind.h" or want to fake valgrind,
 //  there are two ways to make this function return non-zero:
 //    - Use environment variable: export RUNNING_ON_VALGRIND=1
-//    - Make your tool intercept the function RunningOnValgrind() and
+//    - Make your tool intercept the function AbslRunningOnValgrind() and
 //      change its return value.
 //
-int RunningOnValgrind(void);
+int AbslRunningOnValgrind(void);
 
-// ValgrindSlowdown returns:
-//    * 1.0, if (RunningOnValgrind() == 0)
-//    * 50.0, if (RunningOnValgrind() != 0 && getenv("VALGRIND_SLOWDOWN") ==
+// AbslValgrindSlowdown returns:
+//    * 1.0, if (AbslRunningOnValgrind() == 0)
+//    * 50.0, if (AbslRunningOnValgrind() != 0 && getenv("VALGRIND_SLOWDOWN") ==
 //    NULL)
 //    * atof(getenv("VALGRIND_SLOWDOWN")) otherwise
 //   This function can be used to scale timeout values:
 //   EXAMPLE:
 //   for (;;) {
 //     DoExpensiveBackgroundTask();
-//     SleepForSeconds(5 * ValgrindSlowdown());
+//     SleepForSeconds(5 * AbslValgrindSlowdown());
 //   }
 //
-double ValgrindSlowdown(void);
+double AbslValgrindSlowdown(void);
 
 ABSL_INTERNAL_END_EXTERN_C
 
diff --git a/absl/debugging/internal/vdso_support.cc b/absl/debugging/internal/vdso_support.cc
index 19deb3c..559af8d 100644
--- a/absl/debugging/internal/vdso_support.cc
+++ b/absl/debugging/internal/vdso_support.cc
@@ -80,7 +80,7 @@ const void *VDSOSupport::Init() {
     // on stack, and so glibc works as if VDSO was not present.
     // But going directly to kernel via /proc/self/auxv below bypasses
     // Valgrind zapping. So we check for Valgrind separately.
-    if (RunningOnValgrind()) {
+    if (AbslRunningOnValgrind()) {
       vdso_base_.store(nullptr, std::memory_order_relaxed);
       getcpu_fn_.store(&GetCPUViaSyscall, std::memory_order_relaxed);
       return nullptr;
diff --git a/absl/strings/string_view_test.cc b/absl/strings/string_view_test.cc
index ff31b51..1cb6de2 100644
--- a/absl/strings/string_view_test.cc
+++ b/absl/strings/string_view_test.cc
@@ -1179,7 +1179,7 @@ TEST(FindOneCharTest, EdgeCases) {
 
 #ifndef THREAD_SANITIZER  // Allocates too much memory for tsan.
 TEST(HugeStringView, TwoPointTwoGB) {
-  if (sizeof(size_t) <= 4 || RunningOnValgrind())
+  if (sizeof(size_t) <= 4 || AbslRunningOnValgrind())
     return;
   // Try a huge string piece.
   const size_t size = size_t{2200} * 1000 * 1000;
