load("@rules_cc//cc:defs.bzl", "cc_library")
load("@bazel_skylib//rules:copy_file.bzl", "copy_file")

copy_file(
    name = "config_h",
    src = "@com_github_hcoona_one//third_party/arrow:config.h",
    out = "cpp/src/arrow/util/config.h",
)

copy_file(
    name = "parquet_version_h",
    src = "@com_github_hcoona_one//third_party/arrow:parquet_version.h",
    out = "cpp/src/parquet/parquet_version.h",
)

cc_library(
    name = "arrow",
    srcs = [
        "cpp/src/arrow/array/array_base.cc",
        "cpp/src/arrow/array/array_binary.cc",
        "cpp/src/arrow/array/array_decimal.cc",
        "cpp/src/arrow/array/array_dict.cc",
        "cpp/src/arrow/array/array_nested.cc",
        "cpp/src/arrow/array/array_primitive.cc",
        "cpp/src/arrow/array/builder_adaptive.cc",
        "cpp/src/arrow/array/builder_base.cc",
        "cpp/src/arrow/array/builder_binary.cc",
        "cpp/src/arrow/array/builder_decimal.cc",
        "cpp/src/arrow/array/builder_dict.cc",
        "cpp/src/arrow/array/builder_nested.cc",
        "cpp/src/arrow/array/builder_primitive.cc",
        "cpp/src/arrow/array/builder_union.cc",
        "cpp/src/arrow/array/concatenate.cc",
        "cpp/src/arrow/array/data.cc",
        "cpp/src/arrow/array/diff.cc",
        "cpp/src/arrow/array/util.cc",
        "cpp/src/arrow/array/validate.cc",
        "cpp/src/arrow/builder.cc",
        "cpp/src/arrow/buffer.cc",
        "cpp/src/arrow/chunked_array.cc",
        "cpp/src/arrow/compare.cc",
        "cpp/src/arrow/config.cc",
        "cpp/src/arrow/datum.cc",
        "cpp/src/arrow/device.cc",
        "cpp/src/arrow/extension_type.cc",
        "cpp/src/arrow/memory_pool.cc",
        "cpp/src/arrow/pretty_print.cc",
        "cpp/src/arrow/record_batch.cc",
        "cpp/src/arrow/result.cc",
        "cpp/src/arrow/scalar.cc",
        "cpp/src/arrow/sparse_tensor.cc",
        "cpp/src/arrow/status.cc",
        "cpp/src/arrow/table.cc",
        "cpp/src/arrow/table_builder.cc",
        "cpp/src/arrow/tensor.cc",
        "cpp/src/arrow/tensor/coo_converter.cc",
        "cpp/src/arrow/tensor/csf_converter.cc",
        "cpp/src/arrow/tensor/csx_converter.cc",
        "cpp/src/arrow/type.cc",
        "cpp/src/arrow/visitor.cc",
        "cpp/src/arrow/c/bridge.cc",
        "cpp/src/arrow/io/buffered.cc",
        "cpp/src/arrow/io/caching.cc",
        "cpp/src/arrow/io/compressed.cc",
        "cpp/src/arrow/io/file.cc",
        "cpp/src/arrow/io/hdfs.cc",
        "cpp/src/arrow/io/hdfs_internal.cc",
        "cpp/src/arrow/io/interfaces.cc",
        "cpp/src/arrow/io/memory.cc",
        "cpp/src/arrow/io/slow.cc",
        "cpp/src/arrow/io/transform.cc",
        "cpp/src/arrow/util/basic_decimal.cc",
        "cpp/src/arrow/util/bit_block_counter.cc",
        "cpp/src/arrow/util/bit_run_reader.cc",
        "cpp/src/arrow/util/bit_util.cc",
        "cpp/src/arrow/util/bitmap.cc",
        "cpp/src/arrow/util/bitmap_builders.cc",
        "cpp/src/arrow/util/bitmap_ops.cc",
        "cpp/src/arrow/util/compression.cc",
        "cpp/src/arrow/util/cpu_info.cc",
        "cpp/src/arrow/util/decimal.cc",
        "cpp/src/arrow/util/delimiting.cc",
        "cpp/src/arrow/util/formatting.cc",
        "cpp/src/arrow/util/future.cc",
        "cpp/src/arrow/util/int_util.cc",
        "cpp/src/arrow/util/io_util.cc",
        "cpp/src/arrow/util/iterator.cc",
        "cpp/src/arrow/util/logging.cc",
        "cpp/src/arrow/util/key_value_metadata.cc",
        "cpp/src/arrow/util/memory.cc",
        "cpp/src/arrow/util/mutex.cc",
        "cpp/src/arrow/util/string.cc",
        "cpp/src/arrow/util/string_builder.cc",
        "cpp/src/arrow/util/task_group.cc",
        "cpp/src/arrow/util/thread_pool.cc",
        "cpp/src/arrow/util/time.cc",
        "cpp/src/arrow/util/trie.cc",
        "cpp/src/arrow/util/uri.cc",
        "cpp/src/arrow/util/utf8.cc",
        "cpp/src/arrow/util/value_parsing.cc",
        "cpp/src/arrow/vendored/base64.cpp",
        "cpp/src/arrow/vendored/datetime/tz.cpp",
        "cpp/src/arrow/vendored/double-conversion/bignum.cc",
        "cpp/src/arrow/vendored/double-conversion/double-conversion.cc",
        "cpp/src/arrow/vendored/double-conversion/bignum-dtoa.cc",
        "cpp/src/arrow/vendored/double-conversion/fast-dtoa.cc",
        "cpp/src/arrow/vendored/double-conversion/cached-powers.cc",
        "cpp/src/arrow/vendored/double-conversion/fixed-dtoa.cc",
        "cpp/src/arrow/vendored/double-conversion/diy-fp.cc",
        "cpp/src/arrow/vendored/double-conversion/strtod.cc",
        "cpp/src/arrow/vendored/musl/strptime.c",
    ] + [
        "cpp/src/arrow/util/compression_lz4.cc",
    ] + [
        "cpp/src/arrow/util/compression_snappy.cc",
    ] + [
        "cpp/src/arrow/util/compression_zlib.cc",
    ] + [
        "cpp/src/arrow/compute/api_aggregate.cc",
        "cpp/src/arrow/compute/api_scalar.cc",
        "cpp/src/arrow/compute/api_vector.cc",
        "cpp/src/arrow/compute/cast.cc",
        "cpp/src/arrow/compute/exec.cc",
        "cpp/src/arrow/compute/function.cc",
        "cpp/src/arrow/compute/kernel.cc",
        "cpp/src/arrow/compute/registry.cc",
        "cpp/src/arrow/compute/kernels/aggregate_basic.cc",
        "cpp/src/arrow/compute/kernels/codegen_internal.cc",
        "cpp/src/arrow/compute/kernels/scalar_arithmetic.cc",
        "cpp/src/arrow/compute/kernels/scalar_boolean.cc",
        "cpp/src/arrow/compute/kernels/scalar_cast_boolean.cc",
        "cpp/src/arrow/compute/kernels/scalar_cast_internal.cc",
        "cpp/src/arrow/compute/kernels/scalar_cast_nested.cc",
        "cpp/src/arrow/compute/kernels/scalar_cast_numeric.cc",
        "cpp/src/arrow/compute/kernels/scalar_cast_string.cc",
        "cpp/src/arrow/compute/kernels/scalar_cast_temporal.cc",
        "cpp/src/arrow/compute/kernels/scalar_compare.cc",
        "cpp/src/arrow/compute/kernels/scalar_nested.cc",
        "cpp/src/arrow/compute/kernels/scalar_set_lookup.cc",
        "cpp/src/arrow/compute/kernels/scalar_string.cc",
        "cpp/src/arrow/compute/kernels/scalar_validity.cc",
        "cpp/src/arrow/compute/kernels/scalar_fill_null.cc",
        "cpp/src/arrow/compute/kernels/util_internal.cc",
        "cpp/src/arrow/compute/kernels/vector_hash.cc",
        "cpp/src/arrow/compute/kernels/vector_nested.cc",
        "cpp/src/arrow/compute/kernels/vector_selection.cc",
        "cpp/src/arrow/compute/kernels/vector_sort.cc",
    ] + [
        "cpp/src/arrow/ipc/dictionary.cc",
        "cpp/src/arrow/ipc/feather.cc",
        "cpp/src/arrow/ipc/message.cc",
        "cpp/src/arrow/ipc/metadata_internal.cc",
        "cpp/src/arrow/ipc/options.cc",
        "cpp/src/arrow/ipc/reader.cc",
        "cpp/src/arrow/ipc/writer.cc",
    ] + [
        "cpp/src/arrow/filesystem/filesystem.cc",
        "cpp/src/arrow/filesystem/localfs.cc",
        "cpp/src/arrow/filesystem/mockfs.cc",
        "cpp/src/arrow/filesystem/path_forest.cc",
        "cpp/src/arrow/filesystem/path_util.cc",
        "cpp/src/arrow/filesystem/util_internal.cc",
        "cpp/src/arrow/filesystem/hdfs.cc",
    ] + glob([
        "cpp/src/arrow/**/*.h",
    ]) + glob(["cpp/src/arrow/**/*.hpp"]) + [
        ":gen_cc_flatbuffers",
        ":config_h",
    ],
    hdrs = glob(["cpp/src/arrow/**/*.h"]) + glob(["cpp/src/arrow/**/*.hpp"]) + [
        "cpp/src/arrow/vendored/xxhash/xxhash.c",
        ":gen_cc_flatbuffers",
        ":config_h",
    ],
    defines = [
        "URI_STATIC_BUILD",
        "ARROW_USE_GLOG",
        "ARROW_HDFS",
        "ARROW_HAVE_SSE4_2",
        "ARROW_WITH_LZ4",
        "ARROW_WITH_SNAPPY",
        "ARROW_WITH_ZLIB",
        "HAS_STRING_VIEW=0",
        "HAS_VOID_T=0",
        "HAS_DEDUCTION_GUIDES=0",
    ],
    linkopts = [
        "-ldl",
    ],
    strip_include_prefix = "cpp/src/",
    textual_hdrs = ["cpp/src/arrow/vendored/xxhash/xxhash.c"],
    visibility = ["//visibility:public"],
    deps = [
        ":uri",
        "@com_github_google_flatbuffers//:runtime_cc",
        "//third_party/glog",
        "@com_github_google_snappy//:snappy",
        "@com_github_hcoona_one//third_party/hadoop:hdfs",
        "@com_github_lz4_lz4//:lz4",
        "@com_github_madler_zlib//:zlib",
        "//third_party/absl/strings",
        "//third_party/absl/types:optional",
    ],
)

cc_library(
    name = "uri",
    srcs = [
        "cpp/src/arrow/vendored/uriparser/UriCommon.c",
        "cpp/src/arrow/vendored/uriparser/UriCompare.c",
        "cpp/src/arrow/vendored/uriparser/UriEscape.c",
        "cpp/src/arrow/vendored/uriparser/UriFile.c",
        "cpp/src/arrow/vendored/uriparser/UriIp4.c",
        "cpp/src/arrow/vendored/uriparser/UriIp4Base.c",
        "cpp/src/arrow/vendored/uriparser/UriMemory.c",
        "cpp/src/arrow/vendored/uriparser/UriNormalize.c",
        "cpp/src/arrow/vendored/uriparser/UriNormalizeBase.c",
        "cpp/src/arrow/vendored/uriparser/UriParse.c",
        "cpp/src/arrow/vendored/uriparser/UriParseBase.c",
        "cpp/src/arrow/vendored/uriparser/UriQuery.c",
        "cpp/src/arrow/vendored/uriparser/UriRecompose.c",
        "cpp/src/arrow/vendored/uriparser/UriResolve.c",
        "cpp/src/arrow/vendored/uriparser/UriShorten.c",
    ],
    hdrs = glob(["cpp/src/arrow/vendored/uriparser/*.h"]),
    defines = [
        "URI_STATIC_BUILD",
    ],
)

genrule(
    name = "gen_cc_flatbuffers",
    srcs = [
        "format/File.fbs",
        "format/Message.fbs",
        "format/Schema.fbs",
        "format/SparseTensor.fbs",
        "format/Tensor.fbs",
        "cpp/src/arrow/ipc/feather.fbs",
    ],
    outs = [
        "cpp/src/generated/File_generated.h",
        "cpp/src/generated/Message_generated.h",
        "cpp/src/generated/Schema_generated.h",
        "cpp/src/generated/SparseTensor_generated.h",
        "cpp/src/generated/Tensor_generated.h",
        "cpp/src/generated/feather_generated.h",
    ],
    cmd = " ".join([
        "$(location @com_github_google_flatbuffers//:flatc)",
        "--cpp",
        "--cpp-std c++11",
        "--scoped-enums",
        "-I $$(dirname $(location format/File.fbs))",
        "-o $$(dirname $(location cpp/src/generated/File_generated.h))",
        "$(SRCS)",
    ]),
    tools = [
        "@com_github_google_flatbuffers//:flatc",
    ],
)

genrule(
    name = "gen_cc_thrift_parquet",
    srcs = ["cpp/src/parquet/parquet.thrift"],
    outs = [
        "cpp/src/generated/parquet_constants.cpp",
        "cpp/src/generated/parquet_constants.h",
        "cpp/src/generated/parquet_types.cpp",
        "cpp/src/generated/parquet_types.h",
    ],
    cmd = "mkdir -p $$(dirname $(location cpp/src/generated/parquet_types.h)) && " +
          "$(location @org_apache_thrift//:thrift) " +
          "-out $$(dirname $(location cpp/src/generated/parquet_types.h)) " +
          "-I $$(dirname $(location cpp/src/parquet/parquet.thrift)) --gen cpp:no_skeleton " +
          "$(location cpp/src/parquet/parquet.thrift)",
    tools = ["@org_apache_thrift//:thrift"],
)

cc_library(
    name = "cc_thrift_parquet",
    srcs = [
        "cpp/src/parquet/windows_compatibility.h",
        ":gen_cc_thrift_parquet",
    ],
    includes = ["cpp/src/"],
    deps = [
        ":arrow",
        "@org_apache_thrift//:libthrift",
    ],
)

cc_library(
    name = "parquet",
    srcs = [
        "cpp/src/parquet/arrow/path_internal.cc",
        "cpp/src/parquet/arrow/reader.cc",
        "cpp/src/parquet/arrow/reader_internal.cc",
        "cpp/src/parquet/arrow/schema.cc",
        "cpp/src/parquet/arrow/schema_internal.cc",
        "cpp/src/parquet/arrow/writer.cc",
        "cpp/src/parquet/bloom_filter.cc",
        "cpp/src/parquet/column_reader.cc",
        "cpp/src/parquet/column_scanner.cc",
        "cpp/src/parquet/column_writer.cc",
        "cpp/src/parquet/deprecated_io.cc",
        "cpp/src/parquet/encoding.cc",
        "cpp/src/parquet/encryption.cc",
        "cpp/src/parquet/file_reader.cc",
        "cpp/src/parquet/file_writer.cc",
        "cpp/src/parquet/internal_file_decryptor.cc",
        "cpp/src/parquet/internal_file_encryptor.cc",
        "cpp/src/parquet/level_conversion.cc",
        "cpp/src/parquet/metadata.cc",
        "cpp/src/parquet/murmur3.cc",
        "cpp/src/parquet/platform.cc",
        "cpp/src/parquet/printer.cc",
        "cpp/src/parquet/properties.cc",
        "cpp/src/parquet/schema.cc",
        "cpp/src/parquet/statistics.cc",
        "cpp/src/parquet/stream_reader.cc",
        "cpp/src/parquet/stream_writer.cc",
        "cpp/src/parquet/types.cc",
    ] + [
        "cpp/src/parquet/encryption_internal.cc",
    ] + glob(["cpp/src/parquet/**/*.h"]) + [":parquet_version_h"],
    hdrs = glob(["cpp/src/parquet/**/*.h"]) + [":parquet_version_h"],
    defines = [
        "URI_STATIC_BUILD",
        "ARROW_USE_GLOG",
        "ARROW_HAVE_SSE4_2",
        "ARROW_WITH_LZ4",
        "ARROW_WITH_SNAPPY",
        "ARROW_WITH_ZLIB",
        "HAS_STRING_VIEW=0",
        "HAS_VOID_T=0",
        "HAS_DEDUCTION_GUIDES=0",
    ],
    strip_include_prefix = "cpp/src/",
    visibility = ["//visibility:public"],
    deps = [
        ":arrow",
        ":cc_thrift_parquet",
        "@boringssl//:crypto",
    ],
)
