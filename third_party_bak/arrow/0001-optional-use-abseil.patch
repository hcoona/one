diff --git a/cpp/src/arrow/util/optional.h b/cpp/src/arrow/util/optional.h
index e1c32e7..f4a86fc 100644
--- a/cpp/src/arrow/util/optional.h
+++ b/cpp/src/arrow/util/optional.h
@@ -19,17 +19,17 @@

 #define optional_CONFIG_SELECT_OPTIONAL optional_OPTIONAL_NONSTD

-#include "arrow/vendored/optional.hpp"  // IWYU pragma: export
+#include "absl/types/optional.h"  // IWYU pragma: export

 namespace arrow {
 namespace util {

 template <typename T>
-using optional = nonstd::optional<T>;
+using optional = absl::optional<T>;

-using nonstd::bad_optional_access;
-using nonstd::make_optional;
-using nonstd::nullopt;
+using absl::bad_optional_access;
+using absl::make_optional;
+using absl::nullopt;

 }  // namespace util
 }  // namespace arrow
diff --git a/cpp/src/parquet/statistics.cc b/cpp/src/parquet/statistics.cc
index 6c6cefe..728e03c 100644
--- a/cpp/src/parquet/statistics.cc
+++ b/cpp/src/parquet/statistics.cc
@@ -222,11 +222,11 @@ CleanStatistic(std::pair<T, T> min_max) {
 
   // Ignore if one of the value is nan.
   if (std::isnan(min) || std::isnan(max)) {
-    return nonstd::nullopt;
+    return arrow::util::nullopt;
   }
 
   if (min == std::numeric_limits<T>::max() && max == std::numeric_limits<T>::lowest()) {
-    return nonstd::nullopt;
+    return arrow::util::nullopt;
   }
 
   T zero{};
@@ -244,7 +244,7 @@ CleanStatistic(std::pair<T, T> min_max) {
 
 optional<std::pair<FLBA, FLBA>> CleanStatistic(std::pair<FLBA, FLBA> min_max) {
   if (min_max.first.ptr == nullptr || min_max.second.ptr == nullptr) {
-    return nonstd::nullopt;
+    return arrow::util::nullopt;
   }
   return min_max;
 }
@@ -252,7 +252,7 @@ optional<std::pair<FLBA, FLBA>> CleanStatistic(std::pair<FLBA, FLBA> min_max) {
 optional<std::pair<ByteArray, ByteArray>> CleanStatistic(
     std::pair<ByteArray, ByteArray> min_max) {
   if (min_max.first.ptr == nullptr || min_max.second.ptr == nullptr) {
-    return nonstd::nullopt;
+    return arrow::util::nullopt;
   }
   return min_max;
 }
