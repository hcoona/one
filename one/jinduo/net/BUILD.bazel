# Copyright (c) 2022 Zhang Shuai<zhangshuai.ustc@gmail.com>.
# All rights reserved.
#
# This file is part of ONE.
#
# ONE is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# ONE is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# ONE. If not, see <https://www.gnu.org/licenses/>.

load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library", "cc_test")

cc_library(
    name = "net",
    srcs = [
        "buffer.cc",
        "event_loop.cc",
        "event_loop_thread.cc",
        "inet_address.cc",
        "internal/acceptor.cc",
        "internal/acceptor.h",
        "internal/channel.cc",
        "internal/channel.h",
        "internal/connector.cc",
        "internal/connector.h",
        "internal/event_loop_thread_pool.cc",
        "internal/event_loop_thread_pool.h",
        "internal/poller.cc",
        "internal/poller.h",
        "internal/poller/default_poller.cc",
        "internal/poller/epoll_poller.cc",
        "internal/poller/epoll_poller.h",
        "internal/poller/poll_poller.cc",
        "internal/poller/poll_poller.h",
        "internal/socket.cc",
        "internal/socket.h",
        "internal/sockets_ops.cc",
        "internal/sockets_ops.h",
        "internal/timer.cc",
        "internal/timer.h",
        "internal/timer_queue.cc",
        "internal/timer_queue.h",
        "tcp_client.cc",
        "tcp_connection.cc",
        "tcp_server.cc",
    ],
    hdrs = [
        "buffer.h",
        "callbacks.h",
        "event_loop.h",
        "event_loop_thread.h",
        "inet_address.h",
        "tcp_client.h",
        "tcp_connection.h",
        "tcp_server.h",
        "timer_id.h",
    ],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//one/base",
        "//one/jinduo/base",
        "@com_github_google_glog//:glog",
        "@com_google_absl//absl/base",
        "@com_google_absl//absl/container:fixed_array",
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
    ],
)

# The test desired to run infinite times.
cc_binary(
    name = "channel_test",
    srcs = ["internal/channel_test.cc"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror",
    ],
    deps = [
        ":net",
        "@com_github_google_glog//:glog",
        "@com_google_absl//absl/time",
    ],
)

# The test desired to abort when creating event loop in callback function.
cc_binary(
    name = "event_loop_test",
    srcs = ["event_loop_test.cc"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror",
    ],
    deps = [
        ":net",
        "@com_google_absl//absl/time",
    ],
)

cc_binary(
    name = "event_loop_thread_test",
    srcs = ["event_loop_thread_test.cc"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror",
    ],
    deps = [
        ":net",
        "@com_github_google_glog//:glog",
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/time",
    ],
)

cc_test(
    name = "event_loop_thread_pool_test",
    srcs = [
        "internal/event_loop_thread_pool.h",
        "internal/event_loop_thread_pool_test.cc",
    ],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror",
    ],
    deps = [
        ":net",
        "@com_github_gflags_gflags//:gflags",
        "@com_github_google_glog//:glog",
        "@com_google_absl//absl/functional:bind_front",
    ],
)

cc_test(
    name = "buffer_test",
    srcs = ["buffer_test.cc"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror",
    ],
    deps = [
        ":net",
        "@com_google_googletest//:gtest",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "inet_address_test",
    srcs = ["inet_address_test.cc"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror",
    ],
    deps = [
        ":net",
        "@com_google_googletest//:gtest",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "timer_queue_test",
    srcs = ["internal/timer_queue_test.cc"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror",
    ],
    tags = ["broken"],
    deps = [
        ":net",
        "@com_github_gflags_gflags//:gflags",
        "@com_github_google_glog//:glog",
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/time",
        "@com_google_googletest//:gtest",
        "@com_google_googletest//:gtest_main",
    ],
)
