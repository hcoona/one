syntax = "proto3";

package hcoona.codelab;

enum EnumA {
  ENUMA_UNSPECIFIED = 0;
  ENUMA_X = 1;
  ENUMA_Y = 2;
}

message MessageC {
  repeated sint64 my_sint64_value = 1;
}

message MessageA {
  message NestedMessageB {
    repeated sfixed64 my_sfixed64_value = 1;
  }
  int32 my_int32_value = 1;
  int64 my_int64_value = 2;
  uint64 my_uint64_value = 3;
  bool my_bool_value = 4;
  double my_double_value = 5;
  string my_string_value = 6;
  bytes my_bytes_value = 7;
  EnumA my_enum_value = 8;
  repeated int32 id = 100;
  map<int32, int32> my_map = 101;
  repeated NestedMessageB my_message_b_value = 102;
  MessageC my_message_c_value = 103;
  map<int64, MessageC> my_message_c_map = 104;
  oneof my_oneof_value {
    string my_oneof_string_value = 150;
    int64 my_oneof_int64_value = 151;
  }
}

message MessageX {
  // message NestedMessageB {
  //   repeated sfixed64 my_sfixed64_value = 1;
  // }
  // int32 my_int32_value = 1;
  // int64 my_int64_value = 2;
  // bool my_bool_value = 4;
  // double my_double_value = 5;
  // string my_string_value = 6;
  // bytes my_bytes_value = 7;
  // EnumA my_enum_value = 8;
  // repeated int32 id = 100;
  map<string, int32> my_map = 101;
  // repeated NestedMessageB my_message_b_value = 102;
  // MessageC my_message_c_value = 103;
  // map<int64, MessageC> my_message_c_map = 104;
  // oneof my_oneof_value {
  //   string my_oneof_string_value = 150;
  //   int64 my_oneof_int64_value = 151;
  // }
}

message DoubleWrapper {
  double double_value = 1;
}

message DoubleListWrapper {
  repeated double double_list = 1;
}

message DoubleMapWrapper {
  map<int32, double> double_map = 1;
}

message Int32Wrapper {
  int32 int32_value = 1;
}

message Int32ListWrapper {
  repeated int32 int32_list = 1;
}

message Int32MapWrapper {
  map<int32, int32> int32_map = 1;
}

message Int32WrapperWrapper {
  Int32Wrapper value = 1;
}

message Int32WrapperListWrapper {
  repeated Int32Wrapper value = 1;
}

message Int32ListWrapperWrapper {
  Int32ListWrapper value = 1;
}

message Int32ListWrapperListWrapper {
  repeated Int32ListWrapper value = 1;
}

message Int32WrapperMapWrapper {
  map<int32, Int32Wrapper> value = 1;
}
