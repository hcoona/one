diff --git a/gtl/thread_checker_impl.cc b/gtl/thread_checker_impl.cc
index f88cf75..0b40d2d 100644
--- a/gtl/thread_checker_impl.cc
+++ b/gtl/thread_checker_impl.cc
@@ -5,8 +5,6 @@
 #include "gtl/thread_checker_impl.h"

 #include "glog/logging.h"
-#include "gtl/thread_local.h"
-#include "gtl/thread_task_runner_handle.h"

 namespace gtl {

@@ -29,7 +27,7 @@ ThreadCheckerImpl::ThreadCheckerImpl(ThreadCheckerImpl&& other) {
   task_token_ = other.task_token_;
   sequence_token_ = other.sequence_token_;

-  other.thread_id_ = PlatformThreadRef();
+  other.thread_id_.reset();
   other.task_token_ = TaskToken();
   other.sequence_token_ = SequenceToken();
 }
@@ -47,7 +45,7 @@ ThreadCheckerImpl& ThreadCheckerImpl::operator=(ThreadCheckerImpl&& other) {
   TS_UNCHECKED_READ(task_token_) = TS_UNCHECKED_READ(other.task_token_);
   TS_UNCHECKED_READ(sequence_token_) = TS_UNCHECKED_READ(other.sequence_token_);

-  TS_UNCHECKED_READ(other.thread_id_) = PlatformThreadRef();
+  TS_UNCHECKED_READ(other.thread_id_).reset();
   TS_UNCHECKED_READ(other.task_token_) = TaskToken();
   TS_UNCHECKED_READ(other.sequence_token_) = SequenceToken();

@@ -55,7 +53,7 @@ ThreadCheckerImpl& ThreadCheckerImpl::operator=(ThreadCheckerImpl&& other) {
 }

 bool ThreadCheckerImpl::CalledOnValidThread() const {
-  const bool has_thread_been_destroyed = ThreadLocalStorage::HasBeenDestroyed();
+  const bool has_thread_been_destroyed = false;

   absl::MutexLock mutex_lock(&lock_);
   // TaskToken/SequenceToken access thread-local storage. During destruction
@@ -74,32 +72,26 @@ bool ThreadCheckerImpl::CalledOnValidThread() const {
     // ThreadTaskRunnerHandle. Otherwise, the fact that the current task runs on
     // the thread to which this ThreadCheckerImpl is bound is fortuitous.
     if (sequence_token_.IsValid() &&
-        (sequence_token_ != SequenceToken::GetForCurrentThread() ||
-         !ThreadTaskRunnerHandle::IsSet())) {
+        (sequence_token_ != SequenceToken::GetForCurrentThread())) {
       return false;
     }
-  } else if (thread_id_.is_null()) {
-    // We're in tls destruction but the |thread_id_| hasn't been assigned yet.
-    // Assign it now. This doesn't call EnsureAssigned() as to do so while in
-    // tls destruction may result in the wrong TaskToken/SequenceToken.
-    thread_id_ = PlatformThread::CurrentRef();
   }

-  return thread_id_ == PlatformThread::CurrentRef();
+  return thread_id_ == std::this_thread::get_id();
 }

 void ThreadCheckerImpl::DetachFromThread() {
   absl::MutexLock mutex_lock(&lock_);
-  thread_id_ = PlatformThreadRef();
+  thread_id_.reset();
   task_token_ = TaskToken();
   sequence_token_ = SequenceToken();
 }

 void ThreadCheckerImpl::EnsureAssignedLockRequired() const {
-  if (!thread_id_.is_null())
+  if (thread_id_.has_value())
     return;

-  thread_id_ = PlatformThread::CurrentRef();
+  thread_id_ = std::this_thread::get_id();
   task_token_ = TaskToken::GetForCurrentThread();
   sequence_token_ = SequenceToken::GetForCurrentThread();
 }
diff --git a/gtl/thread_checker_impl.h b/gtl/thread_checker_impl.h
index 6c2a1a3..cf710fb 100644
--- a/gtl/thread_checker_impl.h
+++ b/gtl/thread_checker_impl.h
@@ -5,12 +5,13 @@
 #ifndef GTL_THREAD_CHECKER_IMPL_H_
 #define GTL_THREAD_CHECKER_IMPL_H_

+#include <thread>

+#include "third_party/absl/synchronization/mutex.h"
+#include "third_party/absl/types/optional.h"
 #include "gtl/compiler_specific.h"
 #include "gtl/sequence_token.h"
-#include "third_party/absl/synchronization/mutex.h"
 #include "gtl/thread_annotations.h"
-#include "gtl/platform_thread.h"

 namespace gtl {

@@ -52,7 +53,7 @@ class LOCKABLE ThreadCheckerImpl {
   mutable absl::Mutex lock_;

   // Thread on which CalledOnValidThread() may return true.
-  mutable PlatformThreadRef thread_id_ ABSL_GUARDED_BY(lock_);
+  mutable absl::optional<std::thread::id> thread_id_ ABSL_GUARDED_BY(lock_);

   // TaskToken for which CalledOnValidThread() always returns true. This allows
   // CalledOnValidThread() to return true when called multiple times from the
diff --git a/gtl/thread_checker_unittest.cc b/gtl/thread_checker_unittest.cc
index 714cc31..6b020e7 100644
--- a/gtl/thread_checker_unittest.cc
+++ b/gtl/thread_checker_unittest.cc
@@ -4,44 +4,22 @@

 #include "gtl/thread_checker.h"

+#include <functional>
 #include <memory>
+#include <thread>

-#include "gtl/bind.h"
-#include "gtl/bind_helpers.h"
+#include "gtest/gtest.h"
 #include "gtl/macros.h"
-#include "gtl/memory/ref_counted.h"
 #include "gtl/sequence_token.h"
-#include "gtl/test/bind_test_util.h"
 #include "gtl/test/gtest_util.h"
-#include "gtl/test/test_simple_task_runner.h"
-#include "gtl/simple_thread.h"
-#include "gtl/thread_local.h"
-#include "gtl/thread_task_runner_handle.h"
-#include "gtest/gtest.h"

 namespace gtl {
 namespace {

-// A thread that runs a callback.
-class RunCallbackThread : public SimpleThread {
- public:
-  explicit RunCallbackThread(OnceClosure callback)
-      : SimpleThread("RunCallbackThread"), callback_(std::move(callback)) {}
-
- private:
-  // SimpleThread:
-  void Run() override { std::move(callback_).Run(); }
-
-  OnceClosure callback_;
-
-  DISALLOW_COPY_AND_ASSIGN(RunCallbackThread);
-};
-
 // Runs a callback on a new thread synchronously.
-void RunCallbackOnNewThreadSynchronously(OnceClosure callback) {
-  RunCallbackThread run_callback_thread(std::move(callback));
-  run_callback_thread.Start();
-  run_callback_thread.Join();
+void RunCallbackOnNewThreadSynchronously(std::function<void()> callback) {
+  std::thread t(std::move(callback));
+  t.join();
 }

 void ExpectCalledOnValidThread(ThreadCheckerImpl* thread_checker) {
@@ -64,8 +42,6 @@ void ExpectNotCalledOnValidThread(ThreadCheckerImpl* thread_checker) {
 void ExpectNotCalledOnValidThreadWithSequenceTokenAndThreadTaskRunnerHandle(
     ThreadCheckerImpl* thread_checker,
     SequenceToken sequence_token) {
-  ThreadTaskRunnerHandle thread_task_runner_handle(
-      MakeRefCounted<TestSimpleTaskRunner>());
   ScopedSetSequenceTokenForCurrentThread
       scoped_set_sequence_token_for_current_thread(sequence_token);
   ExpectNotCalledOnValidThread(thread_checker);
@@ -80,9 +56,6 @@ TEST(ThreadCheckerTest, AllowedSameThreadNoSequenceToken) {

 TEST(ThreadCheckerTest,
      AllowedSameThreadAndSequenceDifferentTasksWithThreadTaskRunnerHandle) {
-  ThreadTaskRunnerHandle thread_task_runner_handle(
-      MakeRefCounted<TestSimpleTaskRunner>());
-
   std::unique_ptr<ThreadCheckerImpl> thread_checker;
   const SequenceToken sequence_token = SequenceToken::Create();

@@ -127,12 +100,10 @@ TEST(ThreadCheckerTest,
 TEST(ThreadCheckerTest, DisallowedDifferentThreadsNoSequenceToken) {
   ThreadCheckerImpl thread_checker;
   RunCallbackOnNewThreadSynchronously(
-      BindOnce(&ExpectNotCalledOnValidThread, Unretained(&thread_checker)));
+      [&thread_checker]() { ExpectNotCalledOnValidThread(&thread_checker); });
 }

 TEST(ThreadCheckerTest, DisallowedDifferentThreadsSameSequence) {
-  ThreadTaskRunnerHandle thread_task_runner_handle(
-      MakeRefCounted<TestSimpleTaskRunner>());
   const SequenceToken sequence_token(SequenceToken::Create());

   ScopedSetSequenceTokenForCurrentThread
@@ -140,17 +111,15 @@ TEST(ThreadCheckerTest, DisallowedDifferentThreadsSameSequence) {
   ThreadCheckerImpl thread_checker;
   EXPECT_TRUE(thread_checker.CalledOnValidThread());

-  RunCallbackOnNewThreadSynchronously(BindOnce(
-      &ExpectNotCalledOnValidThreadWithSequenceTokenAndThreadTaskRunnerHandle,
-      Unretained(&thread_checker), sequence_token));
+  RunCallbackOnNewThreadSynchronously([&thread_checker, &sequence_token]() {
+    ExpectNotCalledOnValidThreadWithSequenceTokenAndThreadTaskRunnerHandle(
+        &thread_checker, sequence_token);
+  });
 }

 TEST(ThreadCheckerTest, DisallowedSameThreadDifferentSequence) {
   std::unique_ptr<ThreadCheckerImpl> thread_checker;

-  ThreadTaskRunnerHandle thread_task_runner_handle(
-      MakeRefCounted<TestSimpleTaskRunner>());
-
   {
     ScopedSetSequenceTokenForCurrentThread
         scoped_set_sequence_token_for_current_thread(SequenceToken::Create());
@@ -175,14 +144,12 @@ TEST(ThreadCheckerTest, DetachFromThread) {
   // Verify that CalledOnValidThread() returns true when called on a different
   // thread after a call to DetachFromThread().
   RunCallbackOnNewThreadSynchronously(
-      BindOnce(&ExpectCalledOnValidThread, Unretained(&thread_checker)));
+      [&thread_checker]() { ExpectCalledOnValidThread(&thread_checker); });

   EXPECT_FALSE(thread_checker.CalledOnValidThread());
 }

 TEST(ThreadCheckerTest, DetachFromThreadWithSequenceToken) {
-  ThreadTaskRunnerHandle thread_task_runner_handle(
-      MakeRefCounted<TestSimpleTaskRunner>());
   ScopedSetSequenceTokenForCurrentThread
       scoped_set_sequence_token_for_current_thread(SequenceToken::Create());
   ThreadCheckerImpl thread_checker;
@@ -191,7 +158,7 @@ TEST(ThreadCheckerTest, DetachFromThreadWithSequenceToken) {
   // Verify that CalledOnValidThread() returns true when called on a different
   // thread after a call to DetachFromThread().
   RunCallbackOnNewThreadSynchronously(
-      BindOnce(&ExpectCalledOnValidThread, Unretained(&thread_checker)));
+      [&thread_checker]() { ExpectCalledOnValidThread(&thread_checker); });

   EXPECT_FALSE(thread_checker.CalledOnValidThread());
 }
@@ -215,19 +182,19 @@ class ThreadCheckerOwner {
 // Verifies ThreadCheckerImpl::CalledOnValidThread() returns true if called
 // during thread destruction.
 TEST(ThreadCheckerTest, CalledOnValidThreadFromThreadDestruction) {
-  ThreadLocalOwnedPointer<ThreadCheckerOwner> thread_local_owner;
-  RunCallbackOnNewThreadSynchronously(BindLambdaForTesting([&]() {
-    thread_local_owner.Set(std::make_unique<ThreadCheckerOwner>(false));
-  }));
+  thread_local std::unique_ptr<ThreadCheckerOwner> thread_local_owner;
+  RunCallbackOnNewThreadSynchronously([&]() {
+    thread_local_owner = std::make_unique<ThreadCheckerOwner>(false);
+  });
 }

 // Variant of CalledOnValidThreadFromThreadDestruction that calls
 // ThreadCheckerImpl::DetachFromThread().
 TEST(ThreadCheckerTest, CalledOnValidThreadFromThreadDestructionDetached) {
-  ThreadLocalOwnedPointer<ThreadCheckerOwner> thread_local_owner;
-  RunCallbackOnNewThreadSynchronously(BindLambdaForTesting([&]() {
-    thread_local_owner.Set(std::make_unique<ThreadCheckerOwner>(true));
-  }));
+  thread_local std::unique_ptr<ThreadCheckerOwner> thread_local_owner;
+  RunCallbackOnNewThreadSynchronously([&]() {
+    thread_local_owner = std::make_unique<ThreadCheckerOwner>(true);
+  });
 }

 TEST(ThreadCheckerTest, Move) {
@@ -244,13 +211,13 @@ TEST(ThreadCheckerTest, Move) {
   // The two ThreadCheckerImpls moved from should be able to rebind to another
   // thread.
   RunCallbackOnNewThreadSynchronously(
-      BindOnce(&ExpectCalledOnValidThread, Unretained(&initial)));
+      [&initial]() { ExpectCalledOnValidThread(&initial); });
   RunCallbackOnNewThreadSynchronously(
-      BindOnce(&ExpectCalledOnValidThread, Unretained(&move_constructed)));
+      [&move_constructed]() { ExpectCalledOnValidThread(&move_constructed); });

   // But the latest one shouldn't be able to run on another thread.
   RunCallbackOnNewThreadSynchronously(
-      BindOnce(&ExpectNotCalledOnValidThread, Unretained(&move_assigned)));
+      [&move_assigned]() { ExpectNotCalledOnValidThread(&move_assigned); });

   EXPECT_TRUE(move_assigned.CalledOnValidThread());
 }
@@ -264,11 +231,11 @@ TEST(ThreadCheckerTest, MoveAssignIntoDetached) {

   // |initial| is detached after move.
   RunCallbackOnNewThreadSynchronously(
-      BindOnce(&ExpectCalledOnValidThread, Unretained(&initial)));
+      [&initial]() { ExpectCalledOnValidThread(&initial); });

   // |move_assigned| should be associated with the main thread.
   RunCallbackOnNewThreadSynchronously(
-      BindOnce(&ExpectNotCalledOnValidThread, Unretained(&move_assigned)));
+      [&move_assigned]() { ExpectNotCalledOnValidThread(&move_assigned); });

   EXPECT_TRUE(move_assigned.CalledOnValidThread());
 }
@@ -281,11 +248,11 @@ TEST(ThreadCheckerTest, MoveFromDetachedRebinds) {

   // |initial| is still detached after move.
   RunCallbackOnNewThreadSynchronously(
-      BindOnce(&ExpectCalledOnValidThread, Unretained(&initial)));
+      [&initial]() { ExpectCalledOnValidThread(&initial); });

   // |moved_into| is bound to the current thread as part of the move.
   RunCallbackOnNewThreadSynchronously(
-      BindOnce(&ExpectNotCalledOnValidThread, Unretained(&moved_into)));
+      [&moved_into]() { ExpectNotCalledOnValidThread(&moved_into); });
   EXPECT_TRUE(moved_into.CalledOnValidThread());
 }

@@ -295,7 +262,7 @@ TEST(ThreadCheckerTest, MoveOffThreadBanned) {
   ThreadCheckerImpl other_thread;
   other_thread.DetachFromThread();
   RunCallbackOnNewThreadSynchronously(
-      BindOnce(&ExpectCalledOnValidThread, Unretained(&other_thread)));
+      [&other_thread]() { ExpectCalledOnValidThread(&other_thread); });

   EXPECT_DCHECK_DEATH(ThreadCheckerImpl main_thread(std::move(other_thread)));
 }
@@ -338,14 +305,13 @@ TEST_F(ThreadCheckerMacroTest, Macros) {

   THREAD_CHECKER(my_thread_checker);

-  RunCallbackOnNewThreadSynchronously(BindOnce(
-      &ThreadCheckerMacroTest::ExpectDeathOnOtherThread, Unretained(this)));
+  RunCallbackOnNewThreadSynchronously(
+      [this]() { ExpectDeathOnOtherThread(); });

   DETACH_FROM_THREAD(thread_checker_);

   RunCallbackOnNewThreadSynchronously(
-      BindOnce(&ThreadCheckerMacroTest::ExpectNoDeathOnOtherThreadAfterDetach,
-               Unretained(this)));
+      [this]() { ExpectNoDeathOnOtherThreadAfterDetach(); });
 }

 }  // namespace gtl
