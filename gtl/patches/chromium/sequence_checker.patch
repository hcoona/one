diff --git a/gtl/sequence_checker_impl.cc b/gtl/sequence_checker_impl.cc
index 6eb64a9..3c1a4d7 100644
--- a/gtl/sequence_checker_impl.cc
+++ b/gtl/sequence_checker_impl.cc
@@ -5,10 +5,8 @@
 #include "gtl/sequence_checker_impl.h"

 #include "glog/logging.h"
-#include "gtl/memory/ptr_util.h"
 #include "gtl/sequence_token.h"
 #include "gtl/thread_checker_impl.h"
-#include "gtl/thread_local_storage.h"

 namespace gtl {

@@ -24,8 +22,7 @@ class SequenceCheckerImpl::Core {
     // be in a consistent state. Further, task-runner only installs the
     // SequenceToken when running a task. For this reason, |sequence_token_| is
     // not checked during thread destruction.
-    if (!SequenceCheckerImpl::HasThreadLocalStorageBeenDestroyed() &&
-        sequence_token_.IsValid()) {
+    if (sequence_token_.IsValid()) {
       return sequence_token_ == SequenceToken::GetForCurrentThread();
     }

@@ -83,9 +80,4 @@ void SequenceCheckerImpl::DetachFromSequence() {
   core_.reset();
 }

-// static
-bool SequenceCheckerImpl::HasThreadLocalStorageBeenDestroyed() {
-  return ThreadLocalStorage::HasBeenDestroyed();
-}
-
 }  // namespace gtl
diff --git a/gtl/sequence_checker_impl.h b/gtl/sequence_checker_impl.h
index a095d26..9f1b342 100644
--- a/gtl/sequence_checker_impl.h
+++ b/gtl/sequence_checker_impl.h
@@ -48,11 +48,7 @@ class LOCKABLE SequenceCheckerImpl {
  private:
   class Core;

-  // Calls straight to ThreadLocalStorage::HasBeenDestroyed(). Exposed purely
-  // for 'friend' to work.
-  static bool HasThreadLocalStorageBeenDestroyed();
-
-  mutable Lock lock_;
+  mutable absl::Mutex lock_;
   mutable std::unique_ptr<Core> core_ ABSL_GUARDED_BY(lock_);

   DISALLOW_COPY_AND_ASSIGN(SequenceCheckerImpl);
diff --git a/gtl/sequence_checker_unittest.cc b/gtl/sequence_checker_unittest.cc
index c372985..dedc5d1 100644
--- a/gtl/sequence_checker_unittest.cc
+++ b/gtl/sequence_checker_unittest.cc
@@ -6,22 +6,14 @@

 #include <stddef.h>

+#include <functional>
 #include <memory>
 #include <string>
+#include <thread>

-#include "gtl/bind.h"
-#include "gtl/bind_helpers.h"
-#include "gtl/callback_forward.h"
 #include "gtl/macros.h"
 #include "gtl/sequence_token.h"
-#include "gtl/single_thread_task_runner.h"
-#include "gtl/task/post_task.h"
-#include "gtl/task/thread_pool.h"
-#include "gtl/test/bind_test_util.h"
 #include "gtl/test/gtest_util.h"
-#include "gtl/test/task_environment.h"
-#include "gtl/simple_thread.h"
-#include "gtl/thread_local.h"
 #include "gtest/gtest.h"

 namespace gtl {
@@ -29,20 +21,14 @@ namespace gtl {
 namespace {

 // Runs a callback on another thread.
-class RunCallbackThread : public SimpleThread {
+class RunCallbackThread : public std::thread {
  public:
-  explicit RunCallbackThread(OnceClosure callback)
-      : SimpleThread("RunCallbackThread"), callback_(std::move(callback)) {
-    Start();
-    Join();
+  explicit RunCallbackThread(std::function<void()> callback)
+      : std::thread(std::move(callback)) {
+    join();
   }

  private:
-  // SimpleThread:
-  void Run() override { std::move(callback_).Run(); }
-
-  OnceClosure callback_;
-
   DISALLOW_COPY_AND_ASSIGN(RunCallbackThread);
 };

@@ -87,8 +73,9 @@ TEST(SequenceCheckerTest, CallsAllowedOnSameThreadSameSequenceToken) {

 TEST(SequenceCheckerTest, CallsDisallowedOnDifferentThreadsNoSequenceToken) {
   SequenceCheckerImpl sequence_checker;
-  RunCallbackThread thread(
-      BindOnce(&ExpectNotCalledOnValidSequence, Unretained(&sequence_checker)));
+  RunCallbackThread thread([&sequence_checker]() {
+    ExpectNotCalledOnValidSequence(&sequence_checker);
+  });
 }

 TEST(SequenceCheckerTest, CallsAllowedOnDifferentThreadsSameSequenceToken) {
@@ -99,9 +86,10 @@ TEST(SequenceCheckerTest, CallsAllowedOnDifferentThreadsSameSequenceToken) {
   SequenceCheckerImpl sequence_checker;
   EXPECT_TRUE(sequence_checker.CalledOnValidSequence());

-  RunCallbackThread thread(
-      BindOnce(&ExpectCalledOnValidSequenceWithSequenceToken,
-               Unretained(&sequence_checker), sequence_token));
+  RunCallbackThread thread([&sequence_checker, sequence_token]() {
+    ExpectCalledOnValidSequenceWithSequenceToken(&sequence_checker,
+                                                 sequence_token);
+  });
 }

 TEST(SequenceCheckerTest, CallsDisallowedOnSameThreadDifferentSequenceToken) {
@@ -150,8 +138,9 @@ TEST(SequenceCheckerTest, DetachFromSequenceNoSequenceToken) {

   // Verify that CalledOnValidSequence() returns true when called on a
   // different thread after a call to DetachFromSequence().
-  RunCallbackThread thread(
-      BindOnce(&ExpectCalledOnValidSequence, Unretained(&sequence_checker)));
+  RunCallbackThread thread([&sequence_checker]() {
+    ExpectCalledOnValidSequence(&sequence_checker);
+  });

   EXPECT_FALSE(sequence_checker.CalledOnValidSequence());
 }
@@ -169,13 +158,14 @@ TEST(SequenceCheckerTest, Move) {
   // The two SequenceCheckerImpls moved from should be able to rebind to another
   // sequence.
   RunCallbackThread thread1(
-      BindOnce(&ExpectCalledOnValidSequence, Unretained(&initial)));
-  RunCallbackThread thread2(
-      BindOnce(&ExpectCalledOnValidSequence, Unretained(&move_constructed)));
+      [&initial]() { ExpectCalledOnValidSequence(&initial); });
+  RunCallbackThread thread2([&move_constructed]() {
+    ExpectCalledOnValidSequence(&move_constructed);
+  });

   // But the latest one shouldn't be able to run on another sequence.
   RunCallbackThread thread(
-      BindOnce(&ExpectNotCalledOnValidSequence, Unretained(&move_assigned)));
+      [&move_assigned]() { ExpectNotCalledOnValidSequence(&move_assigned); });

   EXPECT_TRUE(move_assigned.CalledOnValidSequence());
 }
@@ -189,11 +179,11 @@ TEST(SequenceCheckerTest, MoveAssignIntoDetached) {

   // |initial| is detached after move.
   RunCallbackThread thread1(
-      BindOnce(&ExpectCalledOnValidSequence, Unretained(&initial)));
+      [&initial]() { ExpectCalledOnValidSequence(&initial); });

   // |move_assigned| should be associated with the main thread.
   RunCallbackThread thread2(
-      BindOnce(&ExpectNotCalledOnValidSequence, Unretained(&move_assigned)));
+      [&move_assigned]() { ExpectNotCalledOnValidSequence(&move_assigned); });

   EXPECT_TRUE(move_assigned.CalledOnValidSequence());
 }
@@ -206,11 +196,11 @@ TEST(SequenceCheckerTest, MoveFromDetachedRebinds) {

   // |initial| is still detached after move.
   RunCallbackThread thread1(
-      BindOnce(&ExpectCalledOnValidSequence, Unretained(&initial)));
+      [&initial]() { ExpectCalledOnValidSequence(&initial); });

   // |moved_into| is bound to the current sequence as part of the move.
   RunCallbackThread thread2(
-      BindOnce(&ExpectNotCalledOnValidSequence, Unretained(&moved_into)));
+      [&moved_into]() { ExpectNotCalledOnValidSequence(&moved_into); });
   EXPECT_TRUE(moved_into.CalledOnValidSequence());
 }

@@ -220,7 +210,7 @@ TEST(SequenceCheckerTest, MoveOffSequenceBanned) {
   SequenceCheckerImpl other_sequence;
   other_sequence.DetachFromSequence();
   RunCallbackThread thread(
-      BindOnce(&ExpectCalledOnValidSequence, Unretained(&other_sequence)));
+      [&other_sequence]() { ExpectCalledOnValidSequence(&other_sequence); });

   EXPECT_DCHECK_DEATH(
       SequenceCheckerImpl main_sequence(std::move(other_sequence)));
@@ -267,20 +257,20 @@ class SequenceCheckerOwner {
   DISALLOW_COPY_AND_ASSIGN(SequenceCheckerOwner);
 };

-// Verifies SequenceCheckerImpl::CalledOnValidSequence() returns true if called
-// during thread destruction.
-TEST(SequenceCheckerTest, CalledOnValidSequenceFromThreadDestruction) {
-  ThreadLocalOwnedPointer<SequenceCheckerOwner> thread_local_owner;
-  {
-    test::TaskEnvironment task_environment;
-    auto task_runner = ThreadPool::CreateSequencedTaskRunner({});
-    task_runner->PostTask(
-        FROM_HERE, BindLambdaForTesting([&]() {
-          thread_local_owner.Set(std::make_unique<SequenceCheckerOwner>());
-        }));
-    task_runner = nullptr;
-    task_environment.RunUntilIdle();
-  }
-}
+// // Verifies SequenceCheckerImpl::CalledOnValidSequence() returns true if called
+// // during thread destruction.
+// TEST(SequenceCheckerTest, CalledOnValidSequenceFromThreadDestruction) {
+//   ThreadLocalOwnedPointer<SequenceCheckerOwner> thread_local_owner;
+//   {
+//     test::TaskEnvironment task_environment;
+//     auto task_runner = ThreadPool::CreateSequencedTaskRunner({});
+//     task_runner->PostTask(
+//         FROM_HERE, BindLambdaForTesting([&]() {
+//           thread_local_owner.Set(std::make_unique<SequenceCheckerOwner>());
+//         }));
+//     task_runner = nullptr;
+//     task_environment.RunUntilIdle();
+//   }
+// }

 }  // namespace gtl
