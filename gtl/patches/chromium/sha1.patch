diff --git a/gtl/hash/sha1.h b/gtl/hash/sha1.h
index 4f7d1dc..42aec1a 100644
--- a/gtl/hash/sha1.h
+++ b/gtl/hash/sha1.h
@@ -23,7 +23,7 @@ enum { kSHA1Length = 20 };  // Length in bytes of a SHA-1 hash.
 using SHA1Digest = std::array<uint8_t, kSHA1Length>;

 // Computes the SHA-1 hash of the input |data| and returns the full hash.
-SHA1Digest SHA1HashSpan(span<const uint8_t> data);
+SHA1Digest SHA1HashSpan(absl::Span<const uint8_t> data);

 // Computes the SHA-1 hash of the input string |str| and returns the full
 // hash.
diff --git a/gtl/hash/sha1_boringssl.cc b/gtl/hash/sha1_boringssl.cc
index 236f6f3..7145175 100644
--- a/gtl/hash/sha1_boringssl.cc
+++ b/gtl/hash/sha1_boringssl.cc
@@ -6,13 +6,23 @@

 #include <stdint.h>

-#include "gtl/strings/string_util.h"
+#include "glog/logging.h"
 #include "openssl/crypto.h"
 #include "openssl/sha.h"

 namespace gtl {
+namespace {

-SHA1Digest SHA1HashSpan(span<const uint8_t> data) {
+char* WriteInto(std::string* str, size_t length_with_null) {
+  DCHECK_GE(length_with_null, 1u);
+  str->reserve(length_with_null);
+  str->resize(length_with_null - 1);
+  return &((*str)[0]);
+}
+
+}  // namespace
+
+SHA1Digest SHA1HashSpan(absl::Span<const uint8_t> data) {
   CRYPTO_library_init();
   SHA1Digest digest;
   SHA1(data.data(), data.size(), digest.data());
diff --git a/gtl/hash/sha1_unittest.cc b/gtl/hash/sha1_unittest.cc
index 3542805..767453a 100644
--- a/gtl/hash/sha1_unittest.cc
+++ b/gtl/hash/sha1_unittest.cc
@@ -10,6 +10,16 @@

 #include "gtest/gtest.h"

+namespace {
+
+template <class ElementType>
+absl::Span<const uint8_t> as_uint8_bytes(absl::Span<ElementType> s) noexcept {
+  return {reinterpret_cast<const uint8_t*>(s.data()),
+          s.size() * sizeof(ElementType)};
+}
+
+}  // namespace
+
 TEST(SHA1Test, Test1) {
   // Example A.1 from FIPS 180-2: one-block message.
   std::string input = "abc";
@@ -68,7 +78,7 @@ TEST(SHA1Test, Test1BytesAndSpan) {
     EXPECT_EQ(kExpected[i], output[i]);

   gtl::SHA1Digest output_array =
-      gtl::SHA1HashSpan(gtl::as_bytes(gtl::make_span(input)));
+      gtl::SHA1HashSpan(as_uint8_bytes(absl::MakeSpan(input)));
   for (size_t i = 0; i < gtl::kSHA1Length; i++)
     EXPECT_EQ(kExpected[i], output_array[i]);
 }
@@ -89,7 +99,7 @@ TEST(SHA1Test, Test2BytesAndSpan) {
     EXPECT_EQ(kExpected[i], output[i]);

   gtl::SHA1Digest output_array =
-      gtl::SHA1HashSpan(gtl::as_bytes(gtl::make_span(input)));
+      gtl::SHA1HashSpan(as_uint8_bytes(absl::MakeSpan(input)));
   for (size_t i = 0; i < gtl::kSHA1Length; i++)
     EXPECT_EQ(kExpected[i], output_array[i]);
 }
@@ -109,7 +119,7 @@ TEST(SHA1Test, Test3BytesAndSpan) {
     EXPECT_EQ(kExpected[i], output[i]);

   gtl::SHA1Digest output_array =
-      gtl::SHA1HashSpan(gtl::as_bytes(gtl::make_span(input)));
+      gtl::SHA1HashSpan(as_uint8_bytes(absl::MakeSpan(input)));
   for (size_t i = 0; i < gtl::kSHA1Length; i++)
     EXPECT_EQ(kExpected[i], output_array[i]);
 }
