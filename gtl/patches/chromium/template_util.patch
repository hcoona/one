diff --git a/gtl/template_util.h b/gtl/template_util.h
index 23ec485..9c8049f 100644
--- a/gtl/template_util.h
+++ b/gtl/template_util.h
@@ -13,6 +13,7 @@
 #include <vector>

 #include "config/config.h"
+#include "third_party/absl/meta/type_traits.h"

 // Some versions of libstdc++ have partial support for type_traits, but misses
 // a smaller subset while removing some of the older non-standard stuff. Assume
@@ -112,44 +113,13 @@ struct is_iterator<T,
 // - When __is_trivially_copyable() is not available because we are on gcc older
 //   than 5.1, we need to fall back to something, so we use __has_trivial_copy()
 //   instead based on what was done one-off in bit_cast() previously.
-
-// TODO(crbug.com/554293): Remove this when all platforms have this in the std
-// namespace and it works with gcc as needed.
-#if defined(CR_USE_FALLBACKS_FOR_OLD_EXPERIMENTAL_GLIBCXX) || \
-    defined(CR_USE_FALLBACKS_FOR_GCC_WITH_LIBCXX)
-template <typename T>
-struct is_trivially_copyable {
-// TODO(danakj): Remove this when android builders are all using a newer version
-// of gcc, or the android ndk is updated to a newer libc++ that does this for
-// us.
-#if _GNUC_VER >= 501
-  static constexpr bool value = __is_trivially_copyable(T);
-#else
-  static constexpr bool value =
-      __has_trivial_copy(T) && __has_trivial_destructor(T);
-#endif
-};
-#else
-template <class T>
-using is_trivially_copyable = std::is_trivially_copyable<T>;
-#endif
-
-#if defined(__GNUC__) && !defined(__clang__) && __GNUC__ <= 7
-// Workaround for g++7 and earlier family.
-// Due to https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80654, without this
-// Optional<std::vector<T>> where T is non-copyable causes a compile error.
-// As we know it is not trivially copy constructible, explicitly declare so.
 template <typename T>
-struct is_trivially_copy_constructible
-    : std::is_trivially_copy_constructible<T> {};
+using is_trivially_copyable =
+    absl::type_traits_internal::is_trivially_copyable<T>;

-template <typename... T>
-struct is_trivially_copy_constructible<std::vector<T...>> : std::false_type {};
-#else
-// Otherwise use std::is_trivially_copy_constructible as is.
 template <typename T>
-using is_trivially_copy_constructible = std::is_trivially_copy_constructible<T>;
-#endif
+using is_trivially_copy_constructible =
+    absl::is_trivially_copy_constructible<T>;

 // gtl::in_place_t is an implementation of std::in_place_t from
 // C++17. A tag type used to request in-place construction in template vararg
diff --git a/gtl/template_util_unittest.cc b/gtl/template_util_unittest.cc
index 2e4197f..b060f06 100644
--- a/gtl/template_util_unittest.cc
+++ b/gtl/template_util_unittest.cc
@@ -7,7 +7,6 @@
 #include <string>
 #include <type_traits>

-#include "gtl/container/flat_tree.h"
 #include "gtl/test/move_only_int.h"
 #include "gtest/gtest.h"

