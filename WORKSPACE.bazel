# Copyright (c) 2022 Zhang Shuai<zhangshuai.ustc@gmail.com>.
# All rights reserved.
#
# This file is part of ONE.
#
# ONE is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# ONE is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# ONE. If not, see <https://www.gnu.org/licenses/>.

workspace(name = "com_github_hcoona_one")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

#
# Constants
#

BAZEL_IO_VERSION = "4.2.2"  # 2021-12-03T09:26:35Z

BAZEL_IO_SHA256 = "4c179ce66bbfff6ac5d81b8895518096e7f750866d08da2d4a574d1b8029e914"

BAZEL_SKYLIB_VERSION = "1.1.1"  # 2021-09-27T17:33:49Z

BAZEL_SKYLIB_SHA256 = "c6966ec828da198c5d9adbaa94c05e3a1c7f21bd012a0b29ba8ddbccb2c93b0d"

BAZEL_PLATFORMS_VERSION = "0.0.4"  # 2021-02-26

BAZEL_PLATFORMS_SHA256 = "079945598e4b6cc075846f7fd6a9d0857c33a7afc0de868c2ccb96405225135d"

RULES_PROTO_TAG = "4.0.0"  # 2021-09-15T14:13:21Z

RULES_PROTO_SHA256 = "66bfdf8782796239d3875d37e7de19b1d94301e8972b3cbd2446b332429b4df1"

RULES_CC_COMMIT_ID = "0913abc3be0edff60af681c0473518f51fb9eeef"  # 2021-08-12T14:14:28Z

RULES_CC_SHA256 = "04d22a8c6f0caab1466ff9ae8577dbd12a0c7d0bc468425b75de094ec68ab4f9"

RULES_PYTHON_TAG = "0.13.0"  # 2022-09-25T10:33:56Z

RULES_PYTHON_SHA256 = "8c8fe44ef0a9afc256d1e75ad5f448bb59b81aba149b8958f02f7b3a98f5d9b4"

RULES_JAVA_TAG = "5.0.0"  # 2021-11-23T10:46:14Z

RULES_JAVA_SHA256 = "ddc9e11f4836265fea905d2845ac1d04ebad12a255f791ef7fd648d1d2215a5b"

RULES_JVM_EXTERNAL_TAG = "4.2"  # 2021-11-24T07:31:45Z

RULES_JVM_EXTERNAL_SHA = "cd1a77b7b02e8e008439ca76fd34f5b07aecb8c752961f9640dea15e9e5ba1ca"

MAVEN_REPOSITORIES = [
    "https://maven.aliyun.com/nexus/content/groups/public/",
    "https://repo1.maven.org/maven2",
]

RULES_GO_TAG = "v0.28.0"  # 2021-07-07T22:49:25Z

RULES_GO_SHA256 = "8e968b5fcea1d2d64071872b12737bbb5514524ee5f0a4f54f5920266c261acb"

RULES_FUZZING_TAG = "0.2.0"  # 2021-07-12T17:55:46Z

RULES_FUZZING_SHA256 = "127d7c45e9b7520b3c42145b3cb1b8c26477cdaed0521b02a0298907339fefa1"

# Replace with the LLVM commit you want to use.
LLVM_COMMIT = "llvmorg-14.0.1"

# The easiest way to calculate this for a new commit is to set it to empty and
# then run a bazel build and it will report the digest necessary to cache the
# archive and make the build reproducible.
LLVM_SHA256 = "c8be00406e872c8a24f8571cf6f5517b73ae707104724b1fd1db2f0af9544019"

#
# Starlark libraries
#

http_archive(
    name = "io_bazel",
    sha256 = BAZEL_IO_SHA256,
    strip_prefix = "bazel-" + BAZEL_IO_VERSION,
    url = "https://github.com/bazelbuild/bazel/archive/" + BAZEL_IO_VERSION + ".zip",
)

http_archive(
    name = "bazel_skylib",
    sha256 = BAZEL_SKYLIB_SHA256,
    urls = [
        "https://github.com/bazelbuild/bazel-skylib/releases/download/{version}/bazel-skylib-{version}.tar.gz".format(version = BAZEL_SKYLIB_VERSION),
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/{version}/bazel-skylib-{version}.tar.gz".format(version = BAZEL_SKYLIB_VERSION),
    ],
)

http_archive(
    name = "platforms",
    sha256 = BAZEL_PLATFORMS_SHA256,
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/platforms/releases/download/{version}/platforms-{version}.tar.gz".format(version = BAZEL_PLATFORMS_VERSION),
        "https://github.com/bazelbuild/platforms/releases/download/{version}/platforms-{version}.tar.gz".format(version = BAZEL_PLATFORMS_VERSION),
    ],
)

http_archive(
    name = "rules_proto",
    sha256 = RULES_PROTO_SHA256,
    strip_prefix = "rules_proto-{version}".format(version = RULES_PROTO_TAG),
    urls = ["https://github.com/bazelbuild/rules_proto/archive/refs/tags/{version}.tar.gz".format(version = RULES_PROTO_TAG)],
)

http_archive(
    name = "rules_cc",
    sha256 = RULES_CC_SHA256,
    strip_prefix = "rules_cc-{commit_id}".format(commit_id = RULES_CC_COMMIT_ID),
    urls = [
        "https://github.com/bazelbuild/rules_cc/archive/{commit_id}.tar.gz".format(commit_id = RULES_CC_COMMIT_ID),
    ],
)

# Use rules_foreign_cc as less as possible.
#
# 1. Build very basic libraries without any further dependencies.
# 2. Build too complex to bazelize library.
http_archive(
    name = "rules_foreign_cc",  # 2021-12-03T17:15:40Z
    sha256 = "2a4d07cd64b0719b39a7c12218a3e507672b82a97b98c6a89d38565894cf7c51",
    strip_prefix = "rules_foreign_cc-0.9.0",
    url = "https://github.com/bazelbuild/rules_foreign_cc/archive/0.9.0.tar.gz",
)

http_archive(
    name = "rules_perl",  # 2021-09-23T03:21:58Z
    sha256 = "7d4e17a5850446388ab74a3d884d80731d45931aa6ac93edb9efbd500628fdcb",
    strip_prefix = "rules_perl-022b8daf2bb4836ac7a50e4a1d8ea056a3e1e403",
    urls = [
        "https://github.com/bazelbuild/rules_perl/archive/022b8daf2bb4836ac7a50e4a1d8ea056a3e1e403.tar.gz",
    ],
)

http_archive(
    name = "rules_python",
    sha256 = RULES_PYTHON_SHA256,
    strip_prefix = "rules_python-{version}".format(version = RULES_PYTHON_TAG),
    urls = [
        "https://github.com/bazelbuild/rules_python/archive/{version}.tar.gz".format(version = RULES_PYTHON_TAG),
    ],
)

http_archive(
    name = "rules_java",
    sha256 = RULES_JAVA_SHA256,
    strip_prefix = "rules_java-{version}".format(version = RULES_JAVA_TAG),
    urls = [
        "https://github.com/bazelbuild/rules_java/archive/refs/tags/{version}.tar.gz".format(version = RULES_JAVA_TAG),
    ],
)

load("@rules_java//toolchains:remote_java_repository.bzl", "remote_java_repository")

remote_java_repository(
    name = "remotejdk11_linux",
    exec_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
    sha256 = "b8e8a63b79bc312aa90f3558edbea59e71495ef1a9c340e38900dd28a1c579f3",
    strip_prefix = "zulu11.50.19-ca-jdk11.0.12-linux_x64",
    urls = [
        "https://mirror.bazel.build/openjdk/azul-zulu11.50.19-ca-jdk11.0.12/zulu11.50.19-ca-jdk11.0.12-linux_x64.tar.gz",
    ],
    version = "11",
)

http_archive(
    name = "rules_jvm_external",
    sha256 = RULES_JVM_EXTERNAL_SHA,
    strip_prefix = "rules_jvm_external-%s" % RULES_JVM_EXTERNAL_TAG,
    url = "https://github.com/bazelbuild/rules_jvm_external/archive/%s.zip" % RULES_JVM_EXTERNAL_TAG,
)

http_archive(
    name = "io_bazel_rules_go",
    sha256 = RULES_GO_SHA256,
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/{version}/rules_go-{version}.zip".format(version = RULES_GO_TAG),
        "https://github.com/bazelbuild/rules_go/releases/download/{version}/rules_go-{version}.zip".format(version = RULES_GO_TAG),
    ],
)

# TODO(zhangshuai.ustc): http_archive deps https://github.com/bazelbuild/rules_fuzzing/blob/master/fuzzing/repositories.bzl
# TODO(zhangshuai.ustc): call init: https://github.com/bazelbuild/rules_fuzzing/blob/master/fuzzing/init.bzl
http_archive(
    name = "rules_fuzzing",
    sha256 = RULES_FUZZING_SHA256,
    strip_prefix = "rules_fuzzing-{version}".format(version = RULES_FUZZING_TAG),
    urls = ["https://github.com/bazelbuild/rules_fuzzing/archive/v{version}.zip".format(version = RULES_FUZZING_TAG)],
)

#
# Starlark rules
#

load("@rules_foreign_cc//foreign_cc:repositories.bzl", "rules_foreign_cc_dependencies")

rules_foreign_cc_dependencies(register_preinstalled_tools = False)

register_toolchains("@remotejdk11_linux_toolchain_config_repo//:toolchain")

#
# C++ deps
#
# Ordered lexicographical.
#

http_archive(
    name = "boost",  # 2021-08-05T01:30:05Z
    build_file = "@com_github_nelhage_rules_boost//:BUILD.boost",
    patch_cmds = ["rm -f doc/pdf/BUILD"],
    patch_cmds_win = ["Remove-Item -Force doc/pdf/BUILD"],
    sha256 = "5347464af5b14ac54bb945dc68f1dd7c56f0dad7262816b956138fc53bcc0131",
    strip_prefix = "boost_1_77_0",
    urls = [
        "https://boostorg.jfrog.io/artifactory/main/release/1.77.0/source/boost_1_77_0.tar.gz",
    ],
)

http_archive(
    # Fork from 90920bbad80e544da9a8a94b16ad8ab4bb66e652
    # Origin commit timestamp 2021-07-19T21:30:04Z
    name = "com_github_chenshuo_muduo",
    sha256 = "2dff311e6092bbc8d0be97e09c4c1f10487265ed639de00dd8b6ab4d4529911c",
    strip_prefix = "muduo-d981f2be83587afdd00175f908f73420a579769b",
    urls = ["https://github.com/hcoona/muduo/archive/d981f2be83587afdd00175f908f73420a579769b.tar.gz"],
)

# TODO(zhangshuai.ds): Use common xxhash?
http_archive(
    name = "com_github_facebook_zstd",  # 2022-01-20T21:54:37Z
    build_file = "//bazel/third_party/zstd:zstd.BUILD",
    sha256 = "7c42d56fac126929a6a85dbc73ff1db2411d04f104fae9bdea51305663a83fd0",
    strip_prefix = "zstd-1.5.2",
    urls = [
        "https://github.com/facebook/zstd/releases/download/v1.5.2/zstd-1.5.2.tar.gz",
    ],
)

http_archive(
    name = "com_github_fmtlib_fmt",  # 2022-01-06T22:52:40Z
    build_file = "//bazel/third_party/fmt:fmt.BUILD",
    sha256 = "3d794d3cf67633b34b2771eb9f073bde87e846e0d395d254df7b211ef1ec7346",
    strip_prefix = "fmt-8.1.1",
    urls = ["https://github.com/fmtlib/fmt/archive/refs/tags/8.1.1.tar.gz"],
)

http_archive(
    name = "com_github_gflags_gflags",  # 2018-11-11T21:30:10Z
    sha256 = "34af2f15cf7367513b352bdcd2493ab14ce43692d2dcd9dfc499492966c64dcf",
    strip_prefix = "gflags-2.2.2",
    urls = ["https://github.com/gflags/gflags/archive/v2.2.2.tar.gz"],
)

http_archive(
    name = "com_github_google_benchmark",  # 2021-07-01T09:02:54Z
    sha256 = "fb3f393a1af8abd74d9905888646aee20958e80a227152173fc432d53e4b8392",
    strip_prefix = "benchmark-db4f581fbbff2fddeef0a01983f3e62c758137a3",
    urls = ["https://github.com/google/benchmark/archive/db4f581fbbff2fddeef0a01983f3e62c758137a3.tar.gz"],
)

http_archive(
    name = "com_github_google_double_conversion",  # 2022-01-30T20:52:33Z
    sha256 = "287c91c6c4185ad5bbeaa8785be6d0271e2a9175d5ff18a81b2dd7946e7402b8",
    strip_prefix = "double-conversion-256ac809561b756645e73ab7127c2aaaeabaa427",
    urls = ["https://github.com/google/double-conversion/archive/256ac809561b756645e73ab7127c2aaaeabaa427.tar.gz"],
)

http_archive(
    name = "com_github_google_glog",  # 2021-05-07T23:06:39Z
    patch_args = ["-p1"],
    patches = [
        "//bazel/third_party/glog:0001-improvement-copts.patch",
        "//bazel/third_party/glog:0002-mark-override.patch",
    ],
    sha256 = "21bc744fb7f2fa701ee8db339ded7dce4f975d0d55837a97be7d46e8382dea5a",
    strip_prefix = "glog-0.5.0",
    urls = ["https://github.com/google/glog/archive/v0.5.0.zip"],
)

http_archive(
    name = "com_github_google_snappy",  # 2017-08-25
    build_file = "//bazel/third_party/snappy:snappy.BUILD",
    sha256 = "3dfa02e873ff51a11ee02b9ca391807f0c8ea0529a4924afa645fbf97163f9d4",
    strip_prefix = "snappy-1.1.7",
    urls = [
        "https://storage.googleapis.com/mirror.tensorflow.org/github.com/google/snappy/archive/1.1.7.tar.gz",
        "https://github.com/google/snappy/archive/1.1.7.tar.gz",
    ],
)

http_archive(
    name = "com_github_jedisct1_libsodium",  # 2019-05-30T21:02:19Z
    build_file = "//bazel/third_party/libsodium:libsodium.BUILD",
    sha256 = "6f504490b342a4f8a4c4a02fc9b866cbef8622d5df4e5452b46be121e46636c1",
    strip_prefix = "libsodium-1.0.18",
    urls = [
        "https://download.libsodium.org/libsodium/releases/libsodium-1.0.18.tar.gz",
        "https://github.com/jedisct1/libsodium/releases/download/1.0.18-RELEASE/libsodium-1.0.18.tar.gz",
    ],
)

http_archive(
    name = "com_github_libevent_libevent",  # 2020-07-05T13:33:03Z
    build_file = "//bazel/third_party/event:event.BUILD",
    patch_cmds = [
    ],
    sha256 = "92e6de1be9ec176428fd2367677e61ceffc2ee1cb119035037a27d346b0403bb",
    strip_prefix = "libevent-2.1.12-stable",
    urls = [
        "https://github.com/libevent/libevent/releases/download/release-2.1.12-stable/libevent-2.1.12-stable.tar.gz",
    ],
)

# TODO(zhangshuai.ustc): patch to leverage clangd CommandMangler.
# https://github.com/llvm/llvm-project/blob/llvmorg-14.0.1/clang-tools-extra/clangd/CompileCommands.cpp
http_archive(
    name = "com_github_llvm_llvm_project",  # 2022-04-13T06:38:11Z
    build_file_content = "# empty",
    sha256 = LLVM_SHA256,
    strip_prefix = "llvm-project-" + LLVM_COMMIT,
    urls = ["https://github.com/llvm/llvm-project/archive/{commit}.tar.gz".format(commit = LLVM_COMMIT)],
)

load("@com_github_llvm_llvm_project//utils/bazel:configure.bzl", "llvm_configure")

llvm_configure(
    name = "llvm-project",
    targets = [
        "X86",
    ],
)

load("@com_github_llvm_llvm_project//utils/bazel:zlib.bzl", "llvm_zlib_external")

llvm_zlib_external(
    name = "llvm_zlib",
    external_zlib = "@com_github_madler_zlib//:zlib",
)

load("@com_github_llvm_llvm_project//utils/bazel:terminfo.bzl", "llvm_terminfo_disable")

llvm_terminfo_disable(name = "llvm_terminfo")

http_archive(
    name = "com_github_lz4_lz4",  # 2019-08-20
    build_file = "//bazel/third_party/lz4:lz4.BUILD",
    sha256 = "658ba6191fa44c92280d4aa2c271b0f4fbc0e34d249578dd05e50e76d0e5efcc",
    strip_prefix = "lz4-1.9.2",
    urls = ["https://github.com/lz4/lz4/archive/v1.9.2.tar.gz"],
)

# TODO(zhangshuai.ustc): SIMD optimization.
# https://github.com/cloudflare/zlib
# zlib-ng
http_archive(
    name = "com_github_madler_zlib",  # 2017-01-15T17:57:23Z
    build_file = "//bazel/third_party/zlib:zlib.BUILD",
    sha256 = "c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1",
    strip_prefix = "zlib-1.2.11",
    urls = ["https://zlib.net/fossils/zlib-1.2.11.tar.gz"],
)

http_archive(
    name = "com_github_nelhage_rules_boost",  # 2021-08-27T15:46:06Z
    patch_args = ["-p1"],
    patches = [
        "//bazel/third_party/boost:0001-fix-deps-repo-name.patch",
        "//bazel/third_party/boost:0002-rename-lzma-repo-name-in-build-file.patch",
    ],
    sha256 = "8be3ad3578231579f3d289c0330fd90975fe437451830a569a9a35661104a211",
    strip_prefix = "rules_boost-630cf5dbad418ee8cfa637b1e33125b11807721d",
    urls = [
        "https://github.com/nelhage/rules_boost/archive/630cf5dbad418ee8cfa637b1e33125b11807721d.tar.gz",
    ],
)

http_archive(
    name = "com_google_absl",  # 2021-09-27T18:06:52Z
    sha256 = "2f0d9c7bc770f32bda06a9548f537b63602987d5a173791485151aba28a90099",
    strip_prefix = "abseil-cpp-7143e49e74857a009e16c51f6076eb197b6ccb49",
    urls = ["https://github.com/abseil/abseil-cpp/archive/7143e49e74857a009e16c51f6076eb197b6ccb49.zip"],
)

http_archive(
    name = "com_google_googletest",  # 2021-07-09T13:28:13Z
    sha256 = "12ef65654dc01ab40f6f33f9d02c04f2097d2cd9fbe48dc6001b29543583b0ad",
    strip_prefix = "googletest-8d51ffdfab10b3fba636ae69bc03da4b54f8c235",
    urls = ["https://github.com/google/googletest/archive/8d51ffdfab10b3fba636ae69bc03da4b54f8c235.zip"],
)

http_archive(
    name = "com_google_protobuf",  # 2021-10-29T00:04:02Z
    build_file = "//bazel/third_party/protobuf:protobuf.BUILD",
    patch_cmds = [
        "sed -i protobuf.bzl -re '4,4d;417,508d'",
    ],
    patch_cmds_win = [
        """$content = Get-Content 'protobuf.bzl' | Where-Object {
    -not ($_.ReadCount -ne 4) -and
    -not ($_.ReadCount -ge 418 -and $_.ReadCount -le 509)
}
Set-Content protobuf.bzl -Value $content -Encoding UTF8
""",
    ],
    sha256 = "87407cd28e7a9c95d9f61a098a53cf031109d451a7763e7dd1253abf8b4df422",
    strip_prefix = "protobuf-3.19.1",
    urls = ["https://github.com/protocolbuffers/protobuf/archive/refs/tags/v3.19.1.tar.gz"],
)

# Too hard to use boringssl/libressl with facebook libraries.
http_archive(
    name = "openssl",
    build_file = "//bazel/third_party/openssl:openssl.BUILD",
    sha256 = "40dceb51a4f6a5275bde0e6bf20ef4b91bfc32ed57c0552e2e8e15463372b17a",
    strip_prefix = "openssl-1.1.1n",
    urls = [
        "https://www.openssl.org/source/openssl-1.1.1n.tar.gz",
        "https://github.com/openssl/openssl/archive/OpenSSL_1_1_1m.tar.gz",
    ],
)

http_archive(
    name = "org_sourceware_bzip2",  # 2019-06-13
    build_file = "//bazel/third_party/bzip2:bzip2.BUILD",
    sha256 = "ab5a03176ee106d3f0fa90e381da478ddae405918153cca248e682cd0c4a2269",
    strip_prefix = "bzip2-1.0.8",
    urls = ["https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz"],
)

http_archive(
    name = "org_tukaani_xz",
    build_file = "@com_github_nelhage_rules_boost//:BUILD.lzma",
    sha256 = "71928b357d0a09a12a4b4c5fafca8c31c19b0e7d3b8ebb19622e96f26dbf28cb",
    strip_prefix = "xz-5.2.3",
    urls = [
        "https://tukaani.org/xz/xz-5.2.3.tar.gz",
    ],
)

#
# Python Dependencies
#
# Ordered lexicographical.
#

load("@rules_python//python:repositories.bzl", "python_register_toolchains")

python_register_toolchains(
    name = "python3_9",
    # Available versions are listed in @rules_python//python:versions.bzl.
    # We recommend using the same version your team is already standardized on.
    python_version = "3.9",
)

load("@python3_9//:defs.bzl", "interpreter")
load("@rules_python//python:pip.bzl", "pip_parse")

# Create a central repo that knows about the dependencies needed from
# requirements.txt. The requirements.txt is generated from
# pdm export -o requirements.txt
#
# As with any repository rule, if you would like to ensure that pip_parse is
# re-executed in order to pick up a non-hermetic change to your environment
# (e.g., updating your system python interpreter), you can force it to
# re-execute by running bazel sync --only [pip_parse name].
pip_parse(
    name = "mono_pip_deps",
    python_interpreter_target = interpreter,
    requirements_lock = "//:requirements.txt",
)

# Load the starlark macro which will define your dependencies.
load("@mono_pip_deps//:requirements.bzl", "install_deps")

# Call it to define repos for your requirements.
install_deps()

#
# Perl Dependencies
#

load("@rules_perl//perl:deps.bzl", "perl_register_toolchains")

perl_register_toolchains()

#
# Tools Dependencies
#

http_archive(
    name = "com_grail_bazel_compdb",
    sha256 = "d32835b26dd35aad8fd0ba0d712265df6565a3ad860d39e4c01ad41059ea7eda",
    strip_prefix = "bazel-compilation-database-0.5.2",
    urls = ["https://github.com/grailbio/bazel-compilation-database/archive/0.5.2.tar.gz"],
)

load("@com_grail_bazel_compdb//:deps.bzl", "bazel_compdb_deps")

bazel_compdb_deps()

# Hedron's Compile Commands Extractor for Bazel
# https://github.com/hedronvision/bazel-compile-commands-extractor
http_archive(
    name = "hedron_compile_commands",
    sha256 = "4deb7cd90ba69983ec7734c0dcc7071828ebdc430a69f82ddbccf698018b9c04",
    strip_prefix = "bazel-compile-commands-extractor-5ceebcf367f51c6a18fffe726755951a43b50e45",
    url = "https://github.com/hedronvision/bazel-compile-commands-extractor/archive/5ceebcf367f51c6a18fffe726755951a43b50e45.tar.gz",
)

load("@hedron_compile_commands//:workspace_setup.bzl", "hedron_compile_commands_setup")

hedron_compile_commands_setup()
