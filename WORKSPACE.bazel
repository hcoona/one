workspace(name = "com_github_hcoona_one")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

#
# Constants
#

BAZEL_SKYLIB_VERSION = "1.1.1"  # 2021-09-27T17:33:49Z

BAZEL_SKYLIB_SHA256 = "c6966ec828da198c5d9adbaa94c05e3a1c7f21bd012a0b29ba8ddbccb2c93b0d"

BAZEL_PLATFORMS_VERSION = "0.0.4"  # 2021-02-26

BAZEL_PLATFORMS_SHA256 = "079945598e4b6cc075846f7fd6a9d0857c33a7afc0de868c2ccb96405225135d"

RULES_PROTO_TAG = "4.0.0"  # 2021-09-15T14:13:21Z

RULES_PROTO_SHA256 = "66bfdf8782796239d3875d37e7de19b1d94301e8972b3cbd2446b332429b4df1"

RULES_CC_COMMIT_ID = "0913abc3be0edff60af681c0473518f51fb9eeef"  # 2021-08-12T14:14:28Z

RULES_CC_SHA256 = "04d22a8c6f0caab1466ff9ae8577dbd12a0c7d0bc468425b75de094ec68ab4f9"

RULES_PYTHON_TAG = "0.4.0"  # 2021-09-12T22:58:33Z

RULES_PYTHON_SHA256 = "954aa89b491be4a083304a2cb838019c8b8c3720a7abb9c4cb81ac7a24230cea"

RULES_JAVA_TAG = "4.0.0"  # 2021-01-21T12:10:05Z

RULES_JAVA_SHA256 = "34b41ec683e67253043ab1a3d1e8b7c61e4e8edefbcad485381328c934d072fe"

RULES_JVM_EXTERNAL_TAG = "4.1"  # 2021-05-18T15:00:52Z

RULES_JVM_EXTERNAL_SHA = "f36441aa876c4f6427bfb2d1f2d723b48e9d930b62662bf723ddfb8fc80f0140"

MAVEN_REPOSITORIES = [
    "https://maven.aliyun.com/nexus/content/groups/public/",
    "https://repo1.maven.org/maven2",
]

RULES_GO_TAG = "v0.28.0"  # 2021-07-07T22:49:25Z

RULES_GO_SHA256 = "8e968b5fcea1d2d64071872b12737bbb5514524ee5f0a4f54f5920266c261acb"

RULES_FUZZING_TAG = "0.2.0"  # 2021-07-12T17:55:46Z

RULES_FUZZING_SHA256 = "127d7c45e9b7520b3c42145b3cb1b8c26477cdaed0521b02a0298907339fefa1"

#
# Starlark libraries
#

http_archive(
    name = "bazel_skylib",
    sha256 = BAZEL_SKYLIB_SHA256,
    urls = [
        "https://github.com/bazelbuild/bazel-skylib/releases/download/{version}/bazel-skylib-{version}.tar.gz".format(version = BAZEL_SKYLIB_VERSION),
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/{version}/bazel-skylib-{version}.tar.gz".format(version = BAZEL_SKYLIB_VERSION),
    ],
)

http_archive(
    name = "platforms",
    sha256 = BAZEL_PLATFORMS_SHA256,
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/platforms/releases/download/{version}/platforms-{version}.tar.gz".format(version = BAZEL_PLATFORMS_VERSION),
        "https://github.com/bazelbuild/platforms/releases/download/{version}/platforms-{version}.tar.gz".format(version = BAZEL_PLATFORMS_VERSION),
    ],
)

http_archive(
    name = "rules_proto",
    sha256 = RULES_PROTO_SHA256,
    strip_prefix = "rules_proto-{version}".format(version = RULES_PROTO_TAG),
    urls = ["https://github.com/bazelbuild/rules_proto/archive/refs/tags/{version}.tar.gz".format(version = RULES_PROTO_TAG)],
)

http_archive(
    name = "rules_cc",
    sha256 = RULES_CC_SHA256,
    strip_prefix = "rules_cc-{commit_id}".format(commit_id = RULES_CC_COMMIT_ID),
    urls = [
        "https://github.com/bazelbuild/rules_cc/archive/{commit_id}.tar.gz".format(commit_id = RULES_CC_COMMIT_ID),
    ],
)

http_archive(
    name = "rules_python",
    sha256 = RULES_PYTHON_SHA256,
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_python/releases/download/{version}/rules_python-{version}.tar.gz".format(version = RULES_PYTHON_TAG),
        "https://github.com/bazelbuild/rules_python/releases/download/{version}/rules_python-{version}.tar.gz".format(version = RULES_PYTHON_TAG),
    ],
)

http_archive(
    name = "rules_java",
    sha256 = RULES_JAVA_SHA256,
    urls = [
        "https://github.com/bazelbuild/rules_java/releases/download/{version}/rules_java-{version}.tar.gz".format(version = RULES_JAVA_TAG),
    ],
)

http_archive(
    name = "remote_jdk11_linux",
    build_file = "@bazel_tools//tools/jdk:jdk.BUILD",
    sha256 = "6c79bfe8bb06c82b72ef2f293a14becef56b3078d298dc75fda4225cbb2d3d0c",
    strip_prefix = "zulu11.43.55-ca-jdk11.0.9.1-linux_x64",
    urls = [
        "https://mirror.bazel.build/openjdk/azul-zulu11.43.55-ca-jdk11.0.9.1/zulu11.43.55-ca-jdk11.0.9.1-linux_x64.tar.gz",
        "https://cdn.azul.com/zulu/bin/zulu11.43.55-ca-jdk11.0.9.1-linux_x64.tar.gz",
    ],
)

http_archive(
    name = "remote_java_tools_linux",
    sha256 = "355c27c603e8fc64bb0e2d7f809741f42576d5f4540f9ce28fd55922085af639",
    urls = [
        "https://mirror.bazel.build/bazel_java_tools/releases/javac11/v10.5/java_tools_javac11_linux-v10.5.zip",
        "https://github.com/bazelbuild/java_tools/releases/download/javac11_v10.5/java_tools_javac11_linux-v10.5.zip",
    ],
)

http_archive(
    name = "rules_jvm_external",
    sha256 = RULES_JVM_EXTERNAL_SHA,
    strip_prefix = "rules_jvm_external-%s" % RULES_JVM_EXTERNAL_TAG,
    url = "https://github.com/bazelbuild/rules_jvm_external/archive/%s.zip" % RULES_JVM_EXTERNAL_TAG,
)

http_archive(
    name = "io_bazel_rules_go",
    sha256 = RULES_GO_SHA256,
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/{version}/rules_go-{version}.zip".format(version = RULES_GO_TAG),
        "https://github.com/bazelbuild/rules_go/releases/download/{version}/rules_go-{version}.zip".format(version = RULES_GO_TAG),
    ],
)

http_archive(
    name = "rules_fuzzing",
    sha256 = RULES_FUZZING_SHA256,
    strip_prefix = "rules_fuzzing-{version}".format(version = RULES_FUZZING_TAG),
    urls = ["https://github.com/bazelbuild/rules_fuzzing/archive/v{version}.zip".format(version = RULES_FUZZING_TAG)],
)

######
# Remove later
######

bind(
    name = "python_headers",
    actual = "//third_party/protobuf/util/python:python_headers",
)

http_archive(
    name = "com_github_nelhage_rules_boost",  # 2021-03-01
    patch_args = ["-p1"],
    patches = [
        "//third_party/boost:patches/0000-rules-boost-use-third-party.patch",
    ],
    sha256 = "07ba4580f4ff3197c4952d3a3164c7c1d4106f9e42fa405496d5843e2e659040",
    strip_prefix = "rules_boost-c13a880269cc044c4b5e90046625339836771d77",
    urls = [
        "https://github.com/nelhage/rules_boost/archive/c13a880269cc044c4b5e90046625339836771d77.tar.gz",
    ],
)

# TODO(zhangshuai.ustc): move boost into third_party.
http_archive(
    name = "boost",  # 2020-12-11
    build_file = "@com_github_nelhage_rules_boost//:BUILD.boost",
    patch_cmds = ["rm -f doc/pdf/BUILD"],
    patch_cmds_win = ["Remove-Item -Force doc/pdf/BUILD"],
    sha256 = "aeb26f80e80945e82ee93e5939baebdca47b9dee80a07d3144be1e1a6a66dd6a",
    strip_prefix = "boost_1_75_0",
    urls = [
        "https://boostorg.jfrog.io/artifactory/main/release/1.75.0/source/boost_1_75_0.tar.gz",
    ],
)

http_archive(
    name = "com_googlesource_code_re2",
    sha256 = "428735aea6e8007c14d2e75c69f66cf5b71a009d9933ba6e51e3cbeb52f12f7d",
    strip_prefix = "re2-b83705e2d297f21b0805202bac86c935670634f8",
    url = "https://github.com/google/re2/archive/b83705e2d297f21b0805202bac86c935670634f8.tar.gz",  # 2020-07-01
)

##############################
# Load repositories methods  #
##############################

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")

bazel_skylib_workspace()

##############################
# Load Python Dependencies   #
##############################

load("@rules_python//python:pip.bzl", "pip_parse")

# Create a central repo that knows about the dependencies needed from
# requirements.txt. The requirements.txt is generated from
# poetry export -f requirements.txt --output requirements.txt --dev
pip_parse(
    name = "one_pip_deps",
    requirements_lock = "//:requirements.txt",
)

# Load the starlark macro which will define your dependencies.
load("@one_pip_deps//:requirements.bzl", "install_deps")

# Call it to define repos for your requirements.
install_deps()

##############################
# Load Java Dependencies     #
##############################

load("@rules_jvm_external//:defs.bzl", "maven_install")
load("@rules_jvm_external//:specs.bzl", "maven")

MAVEN_ARROW_VERSION = "4.0.0"

MAVEN_AVRO_VERSION = "1.10.0"

MAVEN_PARQUET_VERSION = "1.12.0"

MAVEN_HADOOP_VERSION = "2.7.1"

MAVEN_NETTY_VERSION = "4.1.64.Final"

MAVEN_SLF4J_VERSION = "1.7.30"

MAVEN_LOGBACK_VERSION = "1.2.3"

MAVEN_JUNIT_VERSION = "4.13.2"

load("@//bazel:junit5.bzl", "JUNIT5_ARTIFACTS")

maven_install(
    artifacts = [
        "org.apache.arrow:" + name + ":" + MAVEN_ARROW_VERSION
        for name in [
            "arrow-avro",
            # TODO(zhangshuai.ustc): repack arrow-dataset for Linux JNI binary.
            "arrow-dataset",
            "arrow-memory-core",
            "arrow-memory-unsafe",
            "arrow-memory-netty",
            "arrow-vector",
        ]
    ] + [
        "org.apache.avro:avro:" + MAVEN_AVRO_VERSION,
    ] + [
        "org.apache.parquet:" + name + ":" + MAVEN_PARQUET_VERSION
        for name in [
            "parquet-avro",
            "parquet-hadoop",
        ]
    ] + [
        "org.apache.hadoop:" + name + ":" + MAVEN_HADOOP_VERSION
        for name in [
            "hadoop-common",
            "hadoop-mapreduce-client-core",
        ]
    ] + [
        "io.netty:" + name + ":" + MAVEN_NETTY_VERSION
        for name in [
            "netty-buffer",
            "netty-common",
        ]
    ] + [
        "org.slf4j:" + name + ":" + MAVEN_SLF4J_VERSION
        for name in [
            "slf4j-api",
        ]
    ] + [
        "ch.qos.logback:logback-classic:" + MAVEN_LOGBACK_VERSION,
    ] + [
        maven.artifact(
            "junit",
            "junit",
            MAVEN_JUNIT_VERSION,
            testonly = True,
        ),
    ] + JUNIT5_ARTIFACTS + [
        # Generate with `dev-support/bin/refresh_maven_dependencies.sh`.
        "ch.qos.logback:logback-classic:1.2.3",
        "commons-cli:commons-cli:1.4",
        "com.google.guava:guava:26.0-jre",
        "javax.annotation:javax.annotation-api:1.3.2",
        "junit:junit:4.12",
        "net.java.dev.jna:jna:5.4.0",
        "net.java.dev.jna:jna-platform:5.4.0",
        "org.apache.commons:commons-lang3:3.9",
        "org.apache.commons:commons-math3:3.6.1",
        "org.slf4j:slf4j-api:1.7.25",
        "org.assertj:assertj-core:3.13.2",
        # TODO(zhangshuai.ustc): Add it to Maven.
        "commons-codec:commons-codec:1.13",  # directory_manifest
        "com.google.googlejavaformat:google-java-format:1.7",  # tools/google-java-format
    ],
    excluded_artifacts = [
        "org.slf4j:slf4j-log4j12",
    ],
    maven_install_json = "@//:maven_install.json",
    override_targets = {
        "com.google.protobuf:protobuf-java": "//third_party/protobuf:protobuf_java",
        "com.google.protobuf:protobuf-java-util": "//third_party/protobuf:protobuf_java_util",
        "com.google.protobuf:protobuf-javalite": "//third_party/protobuf:protobuf_java_lite",
    },
    repositories = MAVEN_REPOSITORIES,
)

load("@maven//:defs.bzl", "pinned_maven_install")

pinned_maven_install()

##############################
# Load Java Dependencies     #
##############################

load("@io_bazel_rules_go//go:deps.bzl", "go_register_toolchains", "go_rules_dependencies")

go_rules_dependencies()

go_register_toolchains(version = "1.16.5")

##############################
# Tools Dependencies         #
##############################

http_archive(
    name = "bazel_gazelle",
    sha256 = "b85f48fa105c4403326e9525ad2b2cc437babaa6e15a3fc0b1dbab0ab064bc7c",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-gazelle/releases/download/v0.22.2/bazel-gazelle-v0.22.2.tar.gz",
        "https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.22.2/bazel-gazelle-v0.22.2.tar.gz",
    ],
)

load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")

# TODO(zhangshuai.ds): remove it later.
gazelle_dependencies(go_repository_default_config = "@//:WORKSPACE.bazel")

load("@rules_fuzzing//fuzzing/private/oss_fuzz:repository.bzl", "oss_fuzz_repository")

oss_fuzz_repository(
    name = "rules_fuzzing_oss_fuzz",
)

pip_parse(
    name = "fuzzing_py_deps",
    requirements_lock = "@rules_fuzzing//fuzzing:requirements.txt",
)

load("@fuzzing_py_deps//:requirements.bzl", fuzzing_py_install_deps = "install_deps")

fuzzing_py_install_deps()
